{"version":3,"sources":["actions/itemActions.js","actions/types.js","components/ItemForm.js","utils/consts.js","actions/tabActions.js","actions/listActions.js","components/Item.js","components/ItemGridTab.js","components/RightGrid.js","components/AppNavBar.js","history.js","utils/setHeaders.js","actions/authActions.js","components/ConfirmationModal.js","components/OpenOrderModal.js","components/OrderList.js","components/ListContainer.js","components/OrderForm.js","components/NewOrder.js","components/LeftGrid.js","components/Body.js","components/Login.js","components/Logout.js","App.js","serviceWorker.js","reducers/itemReducer.js","reducers/authReducer.js","reducers/listReducer.js","reducers/tabReducer.js","reducers/index.js","store.js","index.js"],"names":["getItems","dispatch","setItemsLoading","axios","get","then","res","type","payload","data","ItemForm","state","name","description","price","avatar","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","formData","FormData","append","props","addItem","getPhoto","files","react_default","a","createElement","Form","className","onSubmit","this","bind","FormGroup","Label","for","Input","onChange","id","placeholder","accept","Button","Component","connect","item","post","OPEN_ORDER_TAB","ITEMS_TAB","changeActiveTab","fromTab","ToTab","setListsLoading","addToList","listId","itemId","put","concat","items","updateNewList","list","Item","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","open","toggle","tab","openOrders","selectedList","selfItem","_id","newOrder","updatedItems","newList","map","indexOf","count","toConsumableArray","objectSpread","onChangeInput","assertThisInitialized","Card","CardHeader","style","color","backgroundColor","padding","CardTitle","toUpperCase","CardImg","top","width","src","imgPath","alt","CardBody","CardText","toFixed","onClick","ItemGridTab","_this$props$item","loading","Col","Spinner","height","length","Container","Row","key","sm","md","lg","react_transition_group","timeout","classNames","components_Item","RightGrid","activeTab","_this2","paddingLeft","paddingRight","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","components_ItemGridTab","components_ItemForm","deleteItem","delete","AppNavBar","_Component","isOpen","inherits","createClass","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","auth","loggedIn","createBrowserHistory","setAuthHeader","token","defaults","headers","common","authenticateWithToken","res2","status","localStorage","setItem","JSON","stringify","history","push","user","catch","ConfirmationModal","toggleModal","handleConfirmation","onConfirm","Modal","ModalHeader","modalHeader","ModalBody","modalBodyText","ModalFooter","cancelColor","modalCancelLabel","confirmColor","modalConfirmationLabel","React","OpenOrderModal","addItemToList","removeItemFromList","removeFromList","total","centered","fade","charAt","slice","colspan","toString","OrderList","confirmationModal","orderListModal","checkoutConformationModal","prevState","toggleCheckout","toggleOrderModal","onDeleteClick","console","log","removeList","onCheckoutClick","lists","filter","closeList","setActiveList","openOrder","listitem","sum","reduce","active_list","activeList","components_OpenOrderModal","role","aria-label","components_ConfirmationModal","ListContainer","selectList","getLists","_this$props$list","renderLists","_ref","components_OrderList","OrderForm","createList","handleClear","clearList","handleIncrement","handleDecrement","index","splice","number","scope","list_item","border","NewOrder","components_OrderForm","LeftGrid","components_ListContainer","NewOrder_NewOrder","Body","getItem","components_AppNavBar","marginRight","marginLeft","components_LeftGrid","components_RightGrid","Redirect","to","Login","username","password","authenticate","Logout","logout","removeItem","App","Router","Route","exact","path","component","Boolean","window","location","hostname","match","initialState","newItem","combineReducers","arguments","undefined","action","_objectSpread2","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46ecf8ee.chunk.js","sourcesContent":["import {GET_ITEMS, DELETE_ITEM, ADD_ITEM, ITEMS_LOADING} from \"./types\";\nimport axios from 'axios';\n\nexport const getItems = () => (dispatch) => {\n    dispatch(setItemsLoading());\n    return axios\n        .get('/api/items')\n        .then(res => dispatch({\n            type: GET_ITEMS,\n            payload: res.data\n        }))\n};\n\nexport const deleteItem = (id) => (dispatch) => {\n    return axios\n        .delete(`/api/items/${id}`)\n        .then(res =>\n            dispatch({\n                type: DELETE_ITEM,\n                payload: id\n            }))\n};\n\nexport const addItem = item => (dispatch) => {\n    return axios\n        .post('/api/items', item)\n        .then(res =>\n            dispatch({\n                type: ADD_ITEM,\n                payload: res.data\n            }))\n};\n\nexport const setItemsLoading = () => {\n    return {\n        type: ITEMS_LOADING\n    }\n};","//item\nexport const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\n\n//auth\nexport const LOGGED_IN = 'LOGGED_IN';\nexport const LOGGED_OUT ='LOGGED_OUT';\nexport const AUTH_LOADING = 'AUTH_LOADING';\n\n\n//list\nexport const GET_LISTS = 'GET_LISTS';\nexport const GET_LISTS_BY_USER = 'GET_LISTS_BY_USER';\nexport const ADD_LIST = 'ADD_LIST';\nexport const DELETE_LIST = 'DELETE_LIST';\nexport const CLOSE_LIST = 'CLOSE_LIST';\nexport const LISTS_LOADING = 'LISTS_LOADING';\nexport const SELECT_LIST = 'SELECT_LIST';\nexport const UPDATE_LIST = 'UPDATE_LIST';\nexport const UPDATE_NEW_LIST = 'UPDATE_NEW_LIST';\nexport const CLEAR_NEW_LIST = 'CLEAR_NEW_LIST';\n\n//tab\nexport const CHANGE_ACTIVE_TAB = 'CHANGE_ACTIVE_TAB';\n","import { addItem } from '../actions/itemActions';\nimport React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass ItemForm extends Component {\n\n    state = {\n        name: '',\n        description: '',\n        price: '',\n        avatar: ''\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let formData = new FormData();\n        formData.append('name', this.state.name);\n        formData.append('description', this.state.description);\n        formData.append('price', this.state.price * 100);\n        formData.append('avatar', this.state.avatar);\n        this.props.addItem(formData);\n        this.setState({\n            name: '',\n            description: '',\n            price: '',\n            avatar: ''\n        });\n    };\n\n    getPhoto = (e) => {\n        e.preventDefault();\n        this.setState({\n                avatar: e.target.files[0]\n        });\n    };\n\n    render() {\n        return (\n            <Form className={'order-form'} onSubmit={this.handleSubmit.bind(this)}>\n                <FormGroup>\n                    <Label for=\"exampleText\">Name</Label>\n                    <Input value={this.state.name} onChange={this.handleChange.bind(this)} type=\"text\" name=\"name\" id=\"exampleText\" placeholder=\"Enter Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Description</Label>\n                    <Input value={this.state.description} onChange={this.handleChange.bind(this)} type=\"tel\" name=\"description\" id=\"exampleText\" placeholder=\"Add description\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Price</Label>\n                    <Input value={this.state.price} onChange={this.handleChange.bind(this)} type=\"number\" name=\"price\" id=\"exampleText\" placeholder=\"Price\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Add Image</Label>\n                    <br/>\n                    <input\n                        onChange={this.getPhoto.bind(this)}\n                        type=\"file\"\n                        id=\"avatar\" name=\"avatar\"\n                        accept=\"image/png, image/jpeg\"/>\n                </FormGroup>\n                <Button>Submit</Button>\n            </Form>\n        );\n    }\n}\n\nItemForm.propTypes = {\n    addItem: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, { addItem })(ItemForm);","export const CLOSED_ORDER = 1;\nexport const OPEN_ORDER = 0;\n\nexport const OPEN_ORDER_TAB = 'openOrders';\nexport const NEW_ORDER_TAB = 'newOrder';\nexport const ITEMS_TAB = 'items';\nexport const NEW_ITEM_TAB = 'newItem';","import { CHANGE_ACTIVE_TAB } from \"./types\";\n\nexport const changeActiveTab = (fromTab, ToTab) => {\n    return {\n        type: CHANGE_ACTIVE_TAB,\n        payload: {\n            fromTab,\n            ToTab\n        }\n    };\n};","import {\n    LISTS_LOADING,\n    DELETE_LIST,\n    GET_LISTS,\n    SELECT_LIST,\n    ADD_LIST,\n    UPDATE_LIST,\n    UPDATE_NEW_LIST,\n    CLEAR_NEW_LIST\n} from \"./types\";\nimport axios from 'axios';\n\nexport const clearList = () => {\n    return {\n        type:CLEAR_NEW_LIST,\n    }\n};\n\nexport const createList = (list) => (dispatch) => {\n    dispatch({\n        type: CLEAR_NEW_LIST\n    });\n    return axios\n        .post(`/api/lists`, list)\n        .then(res => dispatch({\n            type: ADD_LIST,\n            payload: res.data\n        }))\n};\n\nexport const getLists = (id) => (dispatch) => {\n    dispatch(setListsLoading());\n    return axios\n        .get(`/api/lists/user/${id}`)\n        .then(res => dispatch({\n            type: GET_LISTS,\n            payload: res.data\n        }))\n};\n\nexport const removeList = (id) => (dispatch) => {\n    return axios\n        .delete(`/api/lists/${id}`)\n        .then(res => {\n            dispatch({\n                type: DELETE_LIST,\n                payload: res.data._id\n            })\n        });\n\n};\n\nexport const closeList = list => (dispatch) => {\n    return axios\n        .put('/api/lists', list)\n        .then(res =>{\n                dispatch({\n                    type: DELETE_LIST,\n                    payload: res.data._id\n                });\n                dispatch({\n                    type: ADD_LIST,\n                    payload: res.data\n                });\n        }).catch(\n\n    );\n};\n\nexport const selectList = (id) => {\n    return {\n        type: SELECT_LIST,\n        payload: id\n    }\n};\n\nexport const setListsLoading = () => {\n    return {\n        type: LISTS_LOADING\n    }\n};\n\nexport const addToList = (listId, itemId) => (dispatch) => {\n    return axios\n        .put(`/api/lists/${listId}/${itemId}`)\n        .then(res => {\n            dispatch({\n                type: UPDATE_LIST,\n                payload: {\n                    items: res.data,\n                    id: listId\n                }\n            })\n        });\n};\n\nexport const removeFromList = (listId, itemId) => (dispatch) => {\n    return axios\n        .delete(`/api/lists/${listId}/${itemId}`)\n        .then(res => {\n            dispatch({\n                type: UPDATE_LIST,\n                payload: {\n                    items: res.data,\n                    id: listId\n                }\n            })\n        });\n};\n\nexport const updateNewList = list => {\n    return {\n        type: UPDATE_NEW_LIST,\n        payload: list\n    };\n};","import React, { Component } from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardImg,\n    CardTitle,\n} from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport CardHeader from \"reactstrap/es/CardHeader\";\nimport { addToList, updateNewList } from \"../actions/listActions\";\nimport CardText from \"reactstrap/es/CardText\";\n\nclass Item extends Component {\n    constructor(props) {\n        super(props);\n        this.onChangeInput = this.onChangeInput.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n    state = {\n        open: false,\n        name: '',\n        description: ''\n    };\n\n    toggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n    onChangeInput(e) {\n        this.setState({\n            [e.target.name] : e.target.value\n        });\n    }\n    addToList = () => {\n        if (this.props.tab.openOrders)\n            this.props.addToList(this.props.list.selectedList, this.props.selfItem._id);\n        if (this.props.tab.newOrder) {\n            let index = this.props.list.newList.items.map(item => item.id ).indexOf(this.props.selfItem._id);\n            let updatedItems = [];\n            if (index > -1)\n                updatedItems = this.props.list.newList.items.map(item => {\n                    if (item.id === this.props.selfItem._id) {\n                        item.count++;\n                    }\n                    return item;\n                });\n            else {\n                updatedItems = [...this.props.list.newList.items, { id: this.props.selfItem._id, count : 1 }];\n            }\n            this.props.updateNewList({\n                ...this.props.list.newList,\n                items: updatedItems\n            });\n        }\n    };\n\n    render() {\n        const item = this.props.selfItem;\n        return (\n            <div>\n                <Card>\n                    <CardHeader style={{color: '#ffffff', backgroundColor : '#8b918b', padding: '5px'}}>\n                        <CardTitle>\n                            <h6>{item.name.toUpperCase()}</h6>\n                        </CardTitle>\n                    </CardHeader>\n                    <CardImg top style={{width: \"100%\"}} className={'p-1'}\n                        src={`/img/${item.imgPath}`}\n                             alt=\"Card image cap\" />\n                    <CardBody className={'p-1'}>\n                        <CardText className={'p-1 mb-1'}>{(item.price / 100).toFixed(2) + ' LKR'}</CardText>\n                        <Button className={'add-btn'} color={'success'}\n                                onClick={this.addToList.bind(this)}\n                        >\n                            <i className=\"fa fa-plus\"></i>\n                        </Button>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\nItem.propTypes = {\n    list: PropTypes.object.isRequired,\n    tab: PropTypes.object.isRequired,\n    selfItem: PropTypes.object.isRequired,\n    addToList: PropTypes.func.isRequired,\n    updateNewList: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    tab: state.tab\n});\n\nexport default connect(mapStateToProps, { addToList, updateNewList })(Item);","import React, { Component } from 'react';\nimport {Col, Container, Row, Spinner} from \"reactstrap\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport Item from \"./Item\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nclass ItemGridTab extends Component {\n    render() {\n        const { items, loading } = this.props.item;\n        if (!loading) {\n            if (items.length > 0) {\n                return (\n                    <Container>\n                        <Row className={'item-grid-wrapper'}>\n                            {items.map((item) => (\n                                <Col  className={'limited-padding'} key={item._id} sm=\"12\" md=\"6\" lg=\"3\">\n                                    <TransitionGroup className={\"shopping-list\"}>\n                                        <CSSTransition  key={item._id}\n                                                        timeout={500}\n                                                        classNames={'fade'}>\n                                            <Item selfItem={item}/>\n                                        </CSSTransition>\n                                    </TransitionGroup>\n                                </Col>\n                            ))}\n                        </Row>\n                    </Container>\n                )\n            } else {\n                return (\n                    <Col>\n                        <h4>No items to display</h4>\n                    </Col>\n                )\n            }\n\n        } else {\n            return (\n                <Col>\n                    <Spinner style={{ width: '3rem', height: '3rem' }} />\n                </Col>\n            )\n        }\n\n    }\n}\n\nItemGridTab.propTypes = {\n    item: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\n\nexport default connect(mapStateToProps, {})(ItemGridTab);","import React, { Component } from 'react';\nimport { Row, Col, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\nimport { connect } from \"react-redux\";\nimport { deleteItem, getItems } from \"../actions/itemActions\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport ItemForm from \"./ItemForm\";\nimport { NEW_ITEM_TAB, ITEMS_TAB } from '../utils/consts';\nimport { changeActiveTab } from \"../actions/tabActions\";\nimport ItemGridTab from './ItemGridTab';\n\nclass RightGrid extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            activeTab: ITEMS_TAB\n        };\n    }\n    componentDidMount() {\n        this.props.getItems();\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.props.changeActiveTab(this.state.activeTab, tab);\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n    render() {\n        return (\n                <Col style={{paddingLeft: '0', paddingRight: '0'}} className={'custom-grid'}>\n                    <Nav tabs>\n                        <NavItem>\n                            <NavLink\n                                className={classnames({ active: this.state.activeTab === ITEMS_TAB }, 'nav-link')}\n                                onClick={() => { this.toggle(ITEMS_TAB); }}\n                            >\n                                <h3><strong>Items</strong></h3>\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink\n                                className={classnames({ active: this.state.activeTab === NEW_ITEM_TAB }, 'nav-link')}\n                                onClick={() => { this.toggle(NEW_ITEM_TAB); }}\n                            >\n                                <h3><strong>Item Management</strong></h3>\n                            </NavLink>\n                        </NavItem>\n                    </Nav>\n                    <TabContent activeTab={this.state.activeTab}>\n                        <TabPane tabId={ITEMS_TAB}>\n                            <Row>\n                                <Col sm=\"12\">\n                                    <ItemGridTab/>\n                                </Col>\n                            </Row>\n                        </TabPane>\n                        <TabPane tabId={NEW_ITEM_TAB}>\n                            <Row>\n                                <Col sm=\"12\">\n                                    <ItemForm/>\n                                </Col>\n                            </Row>\n                        </TabPane>\n                    </TabContent>\n                </Col>\n            );\n    }\n}\n\nRightGrid.propTypes = {\n    changeActiveTab: PropTypes.func.isRequired,\n    getItems: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, {getItems, deleteItem, changeActiveTab})(RightGrid);","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nexport class AppNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        return (\n            <Navbar\n                dark expand={'sm'}\n                className={'mb-5 nav-bar custom-nav'}>\n                    <NavbarBrand href={'/'}>\n                        <img alt={'Logo'} src=\"/img/logo2.png\" width=\"100\"/><h1>Simple POS</h1></NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className={'ml-auto'} navbar>\n                            <NavItem>\n                                {\n                                this.props.auth.loggedIn? (<NavLink href={'/logout'}>\n                                    Logout\n                                </NavLink>) : ('')\n                                }\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n            </Navbar>\n        )\n    }\n}\n\nAppNavBar.propTypes = {\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { })(AppNavBar);","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n    /* pass a configuration object here if needed */\n})","import axios from 'axios';\n\nexport const setAuthHeader = token => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = token;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\n","import axios from 'axios';\nimport { LOGGED_IN, LOGGED_OUT } from \"./types\";\nimport history from '../history'\nimport { setAuthHeader } from \"../utils/setHeaders\";\n\nexport const authenticate = (user) => dispatch => {\n    return axios\n        .post('/api/users/authenticate', user)\n        .then(res => {\n            setAuthHeader(res.data.token);\n            dispatch(authenticateWithToken(res.data.token));\n        }).catch();\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setAuthHeader();\n    return {\n        type: LOGGED_OUT\n    };\n};\n\nexport const authenticateWithToken = (token) => dispatch => {\n    setAuthHeader(token);\n    return axios\n        .get('/api/users/current')\n        .then(res2 => {\n                if(res2.status === 200) {\n                    localStorage.setItem('token', token);\n                    localStorage.setItem('user', JSON.stringify(res2.data));\n                    history.push('/dashboard');\n                    const loggedIn = res2.status === 200;\n                    dispatch({\n                        type: LOGGED_IN,\n                        payload: {token: token, user: res2.data, loggedIn: loggedIn}\n                    })\n                }\n            }\n        ).catch();\n};\n\n","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from \"prop-types\";\n\nclass ConfirmationModal extends React.Component {\n\n    toggleModal = () => {\n        this.props.toggle();\n    };\n\n    handleConfirmation = () => {\n        this.props.onConfirm();\n        this.toggleModal();\n    };\n\n    render() {\n        return (\n            <div>\n                <Modal isOpen={this.props.isOpen} toggle={this.toggleModal.bind(this)}>\n                    <ModalHeader toggle={this.toggleModal.bind(this)}>{this.props.modalHeader}</ModalHeader>\n                    <ModalBody>\n                        {this.props.modalBodyText}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color={this.props.cancelColor}  onClick={this.toggleModal.bind(this)}>{this.props.modalCancelLabel}</Button>\n                        <Button color={this.props.confirmColor}  onClick={this.handleConfirmation.bind(this)}>{this.props.modalConfirmationLabel}</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nConfirmationModal.propTypes = {\n    modalHeader: PropTypes.string.isRequired,\n    modalCancelLabel: PropTypes.string.isRequired,\n    modalConfirmationLabel: PropTypes.string.isRequired,\n    cancelColor: PropTypes.string.isRequired,\n    confirmColor: PropTypes.string.isRequired,\n    modalBodyText: PropTypes.string.isRequired,\n    onConfirm: PropTypes.func.isRequired\n};\n\nexport default ConfirmationModal;","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { addToList, removeFromList } from \"../actions/listActions\";\n\nclass OpenOrderModal extends React.Component {\n\n    toggleModal = () => {\n        this.props.toggle();\n    };\n\n    addItemToList = (listId, itemId) => {\n        this.props.addToList(listId, itemId);\n    };\n\n    removeItemFromList = (listId, itemId) => {\n        this.props.removeFromList(listId, itemId);\n    };\n\n    render() {\n        let total = 0;\n        return (\n            <div>\n                <Modal centered={true} fade={false} isOpen={this.props.isOpen} toggle={this.toggleModal.bind(this)}>\n                    <ModalHeader toggle={this.toggleModal.bind(this)}>{this.props.modalHeader}</ModalHeader>\n                    <ModalBody>\n                        <table style={{width: '100%'}}>\n                            <tbody>\n                                <tr>\n                                    <th>Item</th>\n                                    <th className={'text-right'}>Count</th>\n                                    <th className={'text-right'}>Price</th>\n                                    <th className={'text-right'}>Add/Remove</th>\n                                </tr>\n                                {this.props.items.map(item => {\n                                    total = total + item.price * item.count / 100\n                                    return (\n                                        <tr key={item._id}>\n                                            <td>\n                                                {item.name.charAt(0).toUpperCase() + item.name.slice(1)}\n                                            </td>\n                                            <td className={'text-right'}>\n                                                {item.count}\n                                            </td>\n                                            <td className={'text-right'}>\n                                                {(item.price * item.count / 100).toFixed()}\n                                            </td>\n                                            <td className={'text-right'}>\n                                            <button type=\"button\" value=\"plus\" onClick={this.addItemToList.bind(this, this.props.id, item.id)}>\n                                                <i className=\"fa fa-plus\"></i>\n                                            </button>\n                                                <button type=\"button\" value=\"minus\" onClick={this.removeItemFromList.bind(this, this.props.id, item.id)}>\n                                                    <i className=\"fa fa-minus\"></i>\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    )\n                                })}\n                                <tr>\n                                    <td colspan=\"4\" className={'text-right'}>\n                                        <b>{'Total :'}{total.toString()}</b>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color={this.props.cancelColor}  onClick={this.toggleModal.bind(this)}>{this.props.modalCancelLabel}</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\n\nOpenOrderModal.propTypes = {\n    addToList: PropTypes.func.isRequired,\n    removeFromList: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, { addToList,removeFromList })(OpenOrderModal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { Col } from 'reactstrap';\nimport { getItems } from '../actions/itemActions'\nimport { closeList, removeList } from '../actions/listActions';\nimport classnames from \"classnames\";\nimport ConfirmationModal from './ConfirmationModal';\nimport OpenOrderModal from './OpenOrderModal';\n\nclass OrderList extends Component {\n    state = {\n        confirmationModal: false,\n        orderListModal: false,\n        checkoutConformationModal: false\n    };\n\n    toggle = () => {\n        this.setState(prevState => ({\n            confirmationModal: !prevState.confirmationModal\n        }));\n    };\n\n    toggleCheckout = () => {\n        this.setState(prevState => ({\n            checkoutConformationModal: !prevState.checkoutConformationModal\n        }));\n    };\n\n    toggleOrderModal = () => {\n        this.setState(prevState => ({\n            orderListModal: !prevState.orderListModal\n        }));\n    }\n\n    onDeleteClick = () => {\n        console.log('deleting');\n        this.props.removeList(this.props.id);\n\n    };\n\n    onCheckoutClick = () => {\n        const { lists } = this.props.list;\n        const list = lists.filter(list => list._id === this.props.id)[0];\n        this.props.closeList({\n            ...list,\n            status: 1\n        });\n    };\n\n    setActiveList = (id) => {\n        this.props.setActiveList(id);\n    };\n\n    openOrder = () => {\n        this.toggleOrderModal();\n    };\n\n    render() {\n        const { lists } = this.props.list;\n        const _id = this.props.id;\n        const name = this.props.name;\n        const list = lists.filter(list => list._id === _id)[0];\n        const items =list.items.map(listitem => {\n            const item = this.props.item.items.filter(item => item._id === listitem.id)[0];\n            if (item)\n                return {...listitem, price: item.price, name: item.name};\n            return false\n        }).filter(listitem => listitem !== false);\n        let sum = 0;\n        if (items.length > 0) {\n            sum = items.map(item => item.price * item.count / 100).reduce((total, value) => total + value, 0).toFixed(2);\n        }\n        return (\n            <Col className={'limited-padding'} sm=\"4\">\n                <div\n                    onClick={this.setActiveList.bind(this, _id)}\n                    className={classnames({ active_list: this.props.activeList === _id }, 'card')}>\n                    <div className={'card-body-wrapper'}>\n                        <OpenOrderModal\n                            id={_id}\n                            isOpen={this.state.orderListModal}\n                            toggle={this.toggleOrderModal.bind(this)}\n                            modalBodyText={'Opened Order'}\n                            modalHeader={name}\n                            modalConfirmationLabel={'Delete'}\n                            modalCancelLabel={'Close'}\n                            cancelColor={\"secondary\"}\n                            confirmColor={\"danger\"}\n                            items={items}\n                        />\n                        <div className={'.card-header:first-child'} style={{color: '#ffffff', backgroundColor : '#8b918b', padding: '5px'}}><h5>{name}</h5></div>\n                        <table className={'m-1 border'}>\n                            <tbody>\n                            <tr>\n                                <th style={{width: '50%'}} className={'text-left'}>Item</th>\n                                <th style={{width: '10%'}} className={'text-right'}>Qty</th>\n                                <th style={{width: '40%'}} className={'text-right'}>Price</th>\n                            </tr>\n                        {items.map(item => (\n                            <tr key={item._id}>\n                                <td style={{width: '50%'}} className={'text-left'}>{\n                                    item.name.charAt(0).toUpperCase() + item.name.slice(1)\n                                }</td>\n                                <td style={{width: '10%'}} className={'text-right'}>{item.count}</td>\n                                <td style={{width: '40%'}} className={'text-right'}>{(item.price * item.count / 100).toFixed(2)}</td>\n                            </tr>\n                        ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <p className=\"price\" style={{color: '#000000'}}> {sum} LKR</p>\n                    <button className={'suc ml-1 mr-1 mt-1 view-btn'} onClick={this.openOrder.bind(this)}>\n                                    <span className={'icon-span'}>\n                                        View\n                                    </span>\n                    </button>\n                    <div className={'card-button-wrapper m-1'}>\n                        <span className={'card-button'}>\n                            <div>\n                                <button className={'suc'} onClick={this.toggleCheckout.bind(this)}>\n                                    <span role=\"img\" className={'icon-span'} aria-label=\"Check\">\n                                        <i className=\"fa fa-check\"></i>\n                                    </span>\n                                </button>\n                                <ConfirmationModal\n                                    onConfirm={this.onCheckoutClick.bind(this)}\n                                    isOpen={this.state.checkoutConformationModal}\n                                    toggle={this.toggleCheckout.bind(this)}\n                                    modalBodyText={'Are you sure you want to check out this order?'}\n                                    modalHeader={'Confirmation'}\n                                    modalConfirmationLabel={'Checkout'}\n                                    modalCancelLabel={'Cancel'}\n                                    cancelColor={\"secondary\"}\n                                    confirmColor={\"success\"}\n                                />\n                            </div>\n                        </span>\n                        <span className={'card-button'}>\n                            <div>\n                                <button className={'dan'} onClick={this.toggle.bind(this)}>\n                                    <span className={'icon-span'}>\n                                        <i className=\"fa fa-times\"></i>\n                                    </span>\n                                </button>\n                                <ConfirmationModal\n                                    onConfirm={this.onDeleteClick.bind(this)}\n                                    isOpen={this.state.confirmationModal}\n                                    toggle={this.toggle.bind(this)}\n                                    modalBodyText={'You are about to delete an Order List. Are you sure you want to delete?'}\n                                    modalHeader={'Confirmation'}\n                                    modalConfirmationLabel={'Delete'}\n                                    modalCancelLabel={'Cancel'}\n                                    cancelColor={\"secondary\"}\n                                    confirmColor={\"danger\"}\n                                />\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </Col>\n        );\n    }\n}\n\nOrderList.propTypes = {\n    getItems: PropTypes.func.isRequired,\n    removeList: PropTypes.func.isRequired,\n    closeList: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired,\n    list: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    list: state.list\n});\n\nexport default connect(mapStateToProps, { getItems, removeList, closeList })(OrderList);\n\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {  getLists, selectList } from \"../actions/listActions\";\nimport OrderList from './OrderList';\nimport { Row, Col, Spinner } from \"reactstrap\";\n\nclass ListContainer extends Component {\n    state = {\n        activeList: ''\n    };\n    componentDidMount() {\n        this.props.getLists(this.props.auth.user.id);\n    }\n\n    setActiveList = (id) => {\n        this.setState({\n            activeList: id\n        });\n        this.props.selectList(id);\n    };\n\n    render() {\n        const { lists, loading } = this.props.list;\n        let renderLists = [];\n        if (lists)\n            renderLists = lists.filter(list => list.status !== 1 && list.items.length > 0);\n        if (!loading) {\n            if (lists.length > 0) {\n                return (\n                    <Col>\n                        <Row className={'order-grid'}>\n                            {renderLists.map(({_id, name}) => (\n                                <OrderList activeList={this.state.activeList} key={_id} name={name} id={_id}\n                                           setActiveList={this.setActiveList}/>\n                            ))}\n                        </Row>\n                    </Col>)\n            } else {\n                return (\n                    <Col>\n                        <h4>No lists to display</h4>\n                    </Col>\n                )\n            }\n\n        } else return (\n            <Col>\n                <Spinner style={{ width: '3rem', height: '3rem' }} />\n            </Col>\n        );\n    }\n}\n\nListContainer.propTypes = {\n    getLists: PropTypes.func.isRequired,\n    selectList: PropTypes.func.isRequired,\n    list: PropTypes.object.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, { getLists, selectList })(ListContainer);","import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { updateNewList, createList, clearList } from '../actions/listActions';\n\nclass OrderForm extends Component {\n    handleChange = (e) => {\n        this.props.updateNewList({\n                ...this.props.list.newList,\n                [e.target.name] : e.target.value\n        });\n    };\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.createList(this.props.list.newList);\n    };\n    handleClear = (e) => {\n        e.preventDefault();\n        this.props.clearList(this.props.list.newList);\n    };\n    handleIncrement = (id, e) => {\n        e.preventDefault();\n        let index = this.props.list.newList.items.map(item => item.id ).indexOf(id);\n        let updatedItems = [];\n        if (index > -1)\n            updatedItems = this.props.list.newList.items.map(item => {\n                if (item.id === id) {\n                    item.count++;\n                }\n                return item;\n            });\n        this.props.updateNewList({\n            ...this.props.list.newList,\n            items: updatedItems\n        });\n    };\n\n    handleDecrement = (id, e) => {\n        e.preventDefault();\n        let index = this.props.list.newList.items.map(item => item.id ).indexOf(id);\n        let updatedItems = [...this.props.list.newList.items];\n        if (index > -1)\n            if (updatedItems[index].count > 1)\n                updatedItems[index].count --;\n            else if (updatedItems[index].count === 1)\n                updatedItems.splice(index, 1);\n        this.props.updateNewList({\n            ...this.props.list.newList,\n            items: updatedItems\n        });\n    };\n    render() {\n        let number = 0;\n        let total = 0;\n        return (\n            <Form className={'order-form'}>\n                <FormGroup>\n                    <Label for=\"exampleText\">Customer Name</Label>\n                    <Input value={this.props.list.newList.name} onChange={this.handleChange.bind(this)} type=\"text\" name=\"name\" id=\"exampleText\" placeholder=\"Enter Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleSelect\">Add Items</Label>\n                    <div className=\"custom-table\">\n                        <table className=\"table\">\n                            <thead className=\"thead-light\">\n                            <tr>\n                                <th scope=\"col\" className=\"td-left\">#</th>\n                                <th scope=\"col\" className=\"td-left\">Item</th>\n                                <th scope=\"col\" className=\"td-right\">Count</th>\n                                <th scope=\"col\" className=\"td-right\">Price</th>\n                                <th scope=\"col\" className=\"td-right\">+/-</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.props.list.newList.items.map(list_item => {\n                                const item = this.props.item.items.filter(item => item._id === list_item.id)[0];\n                                return {...item, count: list_item.count}\n                            }).map(item => {\n                                total += item.price * item.count / 100;\n                                return (\n                                    <tr key={item._id}>\n                                        <th scope=\"row\" className=\"td-left\">{++number}</th>\n                                        <td className=\"td-left\">{item.name}</td>\n                                        <td className=\"td-right\">{item.count}</td>\n                                        <td className=\"td-right\">{item.price * item.count / 100}</td>\n                                        <td className=\"td-right\">\n                                            <button onClick={this.handleIncrement.bind(this, item._id)}>+</button>\n                                            <button onClick={this.handleDecrement.bind(this, item._id)}>-</button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            <tr>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\" className=\"td-right\">{total? \"Total\": \"\"}</th>\n                                <th scope=\"col\" className=\"td-right\">{total? total: ''}</th>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </FormGroup>\n                <Row>\n                    <Col/><Col/><Col/>\n                    <Col>\n                        <Button style={{border: '0', width: '100%'}} className={'dan'} onClick={this.handleClear.bind(this)}>Clear</Button>\n                    </Col>\n                    <Col>\n                        <Button style={{border: '0', width: '100%'}} className={'suc'} onClick={this.handleSubmit.bind(this)}>Submit</Button>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nOrderForm.propTypes = {\n    list: PropTypes.object.isRequired,\n    item: PropTypes.object.isRequired,\n    updateNewList: PropTypes.func.isRequired,\n    createList: PropTypes.func.isRequired,\n    clearList: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    item: state.item\n});\n\nexport default connect(mapStateToProps, { updateNewList, createList, clearList })(OrderForm);","import React, { Component } from 'react';\nimport OrderForm from './OrderForm';\n\nexport default class NewOrder extends Component {\n    render() {\n        return (\n            <OrderForm/>\n        );\n    }\n}","import React from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col } from 'reactstrap';\nimport classnames from 'classnames';\nimport ListContainer from './ListContainer';\nimport NewOrder from './NewOrder';\nimport { OPEN_ORDER_TAB, NEW_ORDER_TAB } from '../utils/consts'\nimport { changeActiveTab } from \"../actions/tabActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nclass LeftGrid extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            activeTab: OPEN_ORDER_TAB\n        };\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.props.changeActiveTab(this.state.activeTab, tab);\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n    render() {\n        return (\n            <Col style={{paddingLeft: '0', paddingRight: '0'}}  className={\"custom-grid\"}>\n                <Nav tabs>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === OPEN_ORDER_TAB }, 'nav-link')}\n                            onClick={() => { this.toggle(OPEN_ORDER_TAB); }}\n                        >\n                            <h3><strong>Open Orders</strong></h3>\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === NEW_ORDER_TAB }, 'nav-link')}\n                            onClick={() => { this.toggle(NEW_ORDER_TAB); }}\n                        >\n                            <h3><strong>New Order</strong></h3>\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId={OPEN_ORDER_TAB}>\n                        <Row>\n                            <Col sm=\"12\">\n                                <ListContainer/>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                    <TabPane tabId={NEW_ORDER_TAB}>\n                        <Row>\n                            <Col sm=\"12\">\n                                <NewOrder/>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                </TabContent>\n            </Col>\n        );\n    }\n}\n\nLeftGrid.propTypes = {\n    changeActiveTab: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    list: state.list\n});\n\nexport default connect(mapStateToProps, { changeActiveTab })(LeftGrid);","import React, { Component } from 'react';\n\nimport { Row} from 'reactstrap';\nimport { Redirect } from \"react-router\";\nimport ItemGrid from './RightGrid';\nimport AppNavBar from './AppNavBar';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { authenticateWithToken } from \"../actions/authActions\";\nimport { getItems } from \"../actions/itemActions\";\nimport LeftGrid from \"./LeftGrid\";\n\nclass Body extends Component {\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.props.authenticateWithToken(token);\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n    render() {\n        if (this.props.auth.loggedIn) {\n            return (\n                <div>\n                    <AppNavBar/>\n                    <Row style={{marginRight: '0', marginLeft: '0'}}>\n                        <LeftGrid/>\n                        <ItemGrid/>\n                    </Row>\n                </div>\n            )\n        } else {\n            return (<Redirect to=\"/login\"/>);\n        }\n    }\n}\n\nBody.propTypes = {\n    authenticateWithToken: PropTypes.func.isRequired,\n    getItems: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { authenticateWithToken, getItems })(Body);\n","import React, { Component } from 'react';\nimport {\n    Container, Col, Form,\n    FormGroup, Label, Input,\n    Button,\n} from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { authenticate, authenticateWithToken } from \"../actions/authActions\";\nimport AppNavBar from './AppNavBar';\nimport { Redirect } from 'react-router';\nimport history from '../history';\n\nclass Login extends Component {\n    state = {\n        username: '',\n        password: '',\n    };\n\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.props.authenticateWithToken(token);\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.authenticate(this.state);\n        history.push('/dashboard');\n    };\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    };\n\n    render() {\n        if (this.props.auth.loggedIn) {\n            return (\n                <Redirect to={'/dashboard'}/>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <AppNavBar/>\n                    <Container className=\"App col-6\">\n                        <h2>Sign In</h2>\n                        <Form className=\"form\">\n                            <Col>\n                                <FormGroup>\n                                    <Label>Username</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"username\"\n                                        placeholder=\"Username\"\n                                        onChange={this.handleChange.bind(this)}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col>\n                                <FormGroup>\n                                    <Label for=\"examplePassword\">Password</Label>\n                                    <Input\n                                        type=\"password\"\n                                        name=\"password\"\n                                        id=\"examplePassword\"\n                                        placeholder=\"********\"\n                                        onChange={this.handleChange.bind(this)}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Button\n                                onClick={this.handleSubmit.bind(this)}\n                            >Submit</Button>\n                        </Form>\n                    </Container>\n                </div>\n            );\n        }\n    }\n}\n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired,\n    authenticateWithToken: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { authenticate, authenticateWithToken})(Login);","import React, { Component } from 'react';\nimport { Redirect } from \"react-router\";\nimport Proptypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { logout } from '../actions/authActions';\n\nclass Logout extends Component {\n\n    componentWillMount() {\n        this.props.logout();\n    }\n\n    render() {\n        return (\n            <Redirect to={'/'}/>\n        );\n    }\n}\n\nLogout.propTypes = {\n    auth: Proptypes.object.isRequired,\n    logout: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => (\n    {\n        auth: state.auth\n    });\n\nexport default connect(mapStateToProps, { logout })(Logout);","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport Body from './components/Body';\nimport Login from './components/Login';\nimport { Router, Route } from 'react-router-dom'\nimport history from './history'\nimport Logout from './components/Logout';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Router history={history}>\n                <div>\n                    <Route exact path=\"/\" component={Body} />\n                    <Route path=\"/login\" component={Login} />\n                    <Route path=\"/dashboard\" component={Body} />\n                    <Route path=\"/logout\" component={Logout} />\n                </div>\n            </Router>\n        );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_ITEM, DELETE_ITEM, GET_ITEMS, ITEMS_LOADING} from \"../actions/types\";\n\n\nconst initialState = {\n    items: [],\n    loading: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item => item._id !== action.payload)\n            };\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [...state.items, action.payload]\n            };\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        default:\n            return state;\n    }\n}","import { LOGGED_IN, LOGGED_OUT, AUTH_LOADING } from \"../actions/types\";\n\nconst initialState = {\n    loggedIn: false,\n    user: {},\n    loading: false,\n    token: ''\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case LOGGED_IN:\n            return {\n                ...state,\n                token: action.payload.token,\n                user: action.payload.user,\n                loggedIn: action.payload.loggedIn,\n            };\n        case LOGGED_OUT:\n            return {\n                ...state,\n                token: '',\n                user: {},\n                loggedIn: false,\n                loading: false,\n            };\n        case AUTH_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n\n        default:\n            return state;\n    }\n}","import {\n    ADD_LIST,\n    DELETE_LIST,\n    LISTS_LOADING,\n    GET_LISTS,\n    SELECT_LIST,\n    UPDATE_LIST,\n    UPDATE_NEW_LIST,\n    CLEAR_NEW_LIST\n} from \"../actions/types\";\nimport {OPEN_ORDER} from \"../utils/consts\";\n\n\nconst initialState = {\n    lists: [],\n    loading: false,\n    selectedList: null,\n    newList: {\n        name: '',\n        status: OPEN_ORDER,\n        items: []\n    }\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE_NEW_LIST:\n            return {\n                ...state,\n                newList: action.payload\n            };\n        case GET_LISTS:\n            return {\n                ...state,\n                lists: action.payload,\n                loading: false\n            };\n        case DELETE_LIST:\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.payload),\n            };\n        case ADD_LIST:\n            return {\n                ...state,\n                lists: [...state.lists, action.payload]\n            };\n        case LISTS_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        case SELECT_LIST:\n            return {\n                ...state,\n                selectedList: action.payload\n            };\n        case UPDATE_LIST:\n            return {\n                ...state,\n                lists: state.lists.map(list => {\n                    return list._id === action.payload.id? {...list, items: action.payload.items}: list;\n                })\n            };\n        case CLEAR_NEW_LIST:\n            return {\n                ...state,\n                newList: {\n                    name: '',\n                    status: OPEN_ORDER,\n                    items: []\n                }\n            };\n        default:\n            return state;\n    }\n}","import { CHANGE_ACTIVE_TAB } from \"../actions/types\";\n\nconst initialState = {\n    openOrders: true,\n    newOrder: false,\n    items: true,\n    newItem: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case CHANGE_ACTIVE_TAB:\n            return {\n                ...state,\n                [action.payload.fromTab] : false,\n                [action.payload.ToTab] : true\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport itemReducer from './itemReducer';\nimport authReducer from './authReducer';\nimport listReducer from './listReducer';\nimport tabReducer from \"./tabReducer\";\n\nexport default combineReducers({\n    item: itemReducer,\n    auth: authReducer,\n    list: listReducer,\n    tab: tabReducer\n});","import {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {\n\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport './styles/index.css';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}