{"version":3,"sources":["actions/listActions.js","actions/types.js","components/Item.js","actions/itemActions.js","components/ItemForm.js","utils/consts.js","actions/tabActions.js","components/ItemGrid.js","components/AppNavBar.js","history.js","utils/setHeaders.js","actions/authActions.js","components/ConfirmationModal.js","components/OpenOrderModal.js","components/OrderList.js","components/ListContainer.js","components/OrderForm.js","components/NewOrder.js","components/LeftGrid.js","components/Body.js","components/Login.js","components/Logout.js","App.js","serviceWorker.js","reducers/itemReducer.js","reducers/authReducer.js","reducers/listReducer.js","reducers/tabReducer.js","reducers/index.js","store.js","index.js"],"names":["setListsLoading","type","addToList","listId","itemId","dispatch","axios","put","concat","then","res","payload","items","data","id","updateNewList","list","Item","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","name","description","toggle","setState","tab","openOrders","selectedList","selfItem","_id","newOrder","updatedItems","newList","map","item","indexOf","count","toConsumableArray","objectSpread","onChangeInput","bind","assertThisInitialized","e","defineProperty","target","value","react_default","a","createElement","Card","CardHeader","style","color","backgroundColor","padding","CardTitle","toUpperCase","CardImg","top","width","className","src","imgPath","alt","CardBody","CardText","price","toFixed","Button","onClick","Component","connect","getItems","setItemsLoading","get","ItemForm","avatar","handleChange","handleSubmit","preventDefault","formData","FormData","append","addItem","getPhoto","files","Form","onSubmit","FormGroup","Label","for","Input","onChange","placeholder","accept","post","OPEN_ORDER_TAB","ITEMS_TAB","changeActiveTab","fromTab","ToTab","ItemGrid","activeTab","_this2","Col","paddingLeft","paddingRight","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","Row","sm","Container","key","md","lg","react_transition_group","timeout","classNames","components_Item","components_ItemForm","deleteItem","delete","AppNavBar","_Component","isOpen","inherits","createClass","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","auth","loggedIn","createBrowserHistory","setAuthHeader","token","defaults","headers","common","authenticateWithToken","res2","status","localStorage","setItem","JSON","stringify","history","push","user","catch","ConfirmationModal","toggleModal","handleConfirmation","onConfirm","Modal","ModalHeader","modalHeader","ModalBody","modalBodyText","ModalFooter","cancelColor","modalCancelLabel","confirmColor","modalConfirmationLabel","React","OpenOrderModal","addItemToList","removeItemFromList","removeFromList","total","centered","fade","charAt","slice","colspan","toString","OrderList","confirmationModal","orderListModal","checkoutConformationModal","prevState","toggleCheckout","toggleOrderModal","onDeleteClick","console","log","removeList","onCheckoutClick","lists","filter","closeList","setActiveList","openOrder","listitem","sum","length","reduce","active_list","activeList","components_OpenOrderModal","role","aria-label","components_ConfirmationModal","ListContainer","selectList","getLists","renderLists","_ref","components_OrderList","OrderForm","createList","handleClear","clearList","number","scope","list_item","border","NewOrder","components_OrderForm","LeftGrid","components_ListContainer","NewOrder_NewOrder","Body","getItem","components_AppNavBar","marginRight","marginLeft","components_LeftGrid","components_ItemGrid","Redirect","to","Login","username","password","authenticate","Logout","logout","removeItem","App","Router","Route","exact","path","component","Boolean","window","location","hostname","match","initialState","loading","newItem","combineReducers","arguments","undefined","action","_objectSpread2","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88b53f49.chunk.js","sourcesContent":["import {\n    LISTS_LOADING,\n    DELETE_LIST,\n    GET_LISTS,\n    SELECT_LIST,\n    ADD_LIST,\n    UPDATE_LIST,\n    UPDATE_NEW_LIST,\n    CLEAR_NEW_LIST\n} from \"./types\";\nimport axios from 'axios';\n\nexport const clearList = () => {\n    return {\n        type:CLEAR_NEW_LIST,\n    }\n};\n\nexport const createList = (list) => (dispatch) => {\n    dispatch({\n        type: CLEAR_NEW_LIST\n    });\n    return axios\n        .post(`/api/lists`, list)\n        .then(res => dispatch({\n            type: ADD_LIST,\n            payload: res.data\n        }))\n};\n\nexport const getLists = (id) => (dispatch) => {\n    dispatch(setListsLoading());\n    return axios\n        .get(`/api/lists/user/${id}`)\n        .then(res => dispatch({\n            type: GET_LISTS,\n            payload: res.data\n        }))\n};\n\nexport const removeList = (id) => (dispatch) => {\n    return axios\n        .delete(`/api/lists/${id}`)\n        .then(res => {\n            dispatch({\n                type: DELETE_LIST,\n                payload: res.data._id\n            })\n        });\n\n};\n\nexport const closeList = list => (dispatch) => {\n    return axios\n        .put('/api/lists', list)\n        .then(res =>{\n                dispatch({\n                    type: DELETE_LIST,\n                    payload: res.data._id\n                });\n                dispatch({\n                    type: ADD_LIST,\n                    payload: res.data\n                });\n        }).catch(\n\n    );\n};\n\nexport const selectList = (id) => {\n    return {\n        type: SELECT_LIST,\n        payload: id\n    }\n};\n\nexport const setListsLoading = () => {\n    return {\n        type: LISTS_LOADING\n    }\n};\n\nexport const addToList = (listId, itemId) => (dispatch) => {\n    return axios\n        .put(`/api/lists/${listId}/${itemId}`)\n        .then(res => {\n            dispatch({\n                type: UPDATE_LIST,\n                payload: {\n                    items: res.data,\n                    id: listId\n                }\n            })\n        });\n};\n\nexport const removeFromList = (listId, itemId) => (dispatch) => {\n    return axios\n        .delete(`/api/lists/${listId}/${itemId}`)\n        .then(res => {\n            dispatch({\n                type: UPDATE_LIST,\n                payload: {\n                    items: res.data,\n                    id: listId\n                }\n            })\n        });\n};\n\nexport const updateNewList = list => {\n    return {\n        type: UPDATE_NEW_LIST,\n        payload: list\n    };\n};","//item\nexport const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\n\n//auth\nexport const LOGGED_IN = 'LOGGED_IN';\nexport const LOGGED_OUT ='LOGGED_OUT';\nexport const AUTH_LOADING = 'AUTH_LOADING';\n\n\n//list\nexport const GET_LISTS = 'GET_LISTS';\nexport const GET_LISTS_BY_USER = 'GET_LISTS_BY_USER';\nexport const ADD_LIST = 'ADD_LIST';\nexport const DELETE_LIST = 'DELETE_LIST';\nexport const CLOSE_LIST = 'CLOSE_LIST';\nexport const LISTS_LOADING = 'LISTS_LOADING';\nexport const SELECT_LIST = 'SELECT_LIST';\nexport const UPDATE_LIST = 'UPDATE_LIST';\nexport const UPDATE_NEW_LIST = 'UPDATE_NEW_LIST';\nexport const CLEAR_NEW_LIST = 'CLEAR_NEW_LIST';\n\n//tab\nexport const CHANGE_ACTIVE_TAB = 'CHANGE_ACTIVE_TAB';\n","import React, { Component } from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardImg,\n    CardTitle,\n} from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport CardHeader from \"reactstrap/es/CardHeader\";\nimport { addToList, updateNewList } from \"../actions/listActions\";\nimport CardText from \"reactstrap/es/CardText\";\n\nclass Item extends Component {\n    constructor(props) {\n        super(props);\n        this.onChangeInput = this.onChangeInput.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n    state = {\n        open: false,\n        name: '',\n        description: ''\n    };\n\n    toggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n    onChangeInput(e) {\n        this.setState({\n            [e.target.name] : e.target.value\n        });\n    }\n    addToList = () => {\n        if (this.props.tab.openOrders)\n            this.props.addToList(this.props.list.selectedList, this.props.selfItem._id);\n        if (this.props.tab.newOrder) {\n            let index = this.props.list.newList.items.map(item => item.id ).indexOf(this.props.selfItem._id);\n            let updatedItems = [];\n            if (index > -1)\n                updatedItems = this.props.list.newList.items.map(item => {\n                    if (item.id === this.props.selfItem._id) {\n                        item.count++;\n                    }\n                    return item;\n                });\n            else {\n                updatedItems = [...this.props.list.newList.items, { id: this.props.selfItem._id, count : 1 }];\n            }\n            this.props.updateNewList({\n                ...this.props.list.newList,\n                items: updatedItems\n            });\n        }\n    };\n\n    render() {\n        const item = this.props.selfItem;\n        return (\n            <div>\n                <Card>\n                    <CardHeader style={{color: '#ffffff', backgroundColor : '#8b918b', padding: '5px'}}>\n                        <CardTitle>\n                            <h6>{item.name.toUpperCase()}</h6>\n                        </CardTitle>\n                    </CardHeader>\n                    <CardImg top style={{width: \"100%\"}} className={'p-1'}\n                        src={`/img/${item.imgPath}`}\n                             alt=\"Card image cap\" />\n                    <CardBody className={'p-1'}>\n                        <CardText className={'p-1 mb-1'}>{(item.price / 100).toFixed(2) + ' LKR'}</CardText>\n                        <Button className={'add-btn'} color={'success'}\n                                onClick={this.addToList.bind(this)}\n                        >\n                            <i className=\"fa fa-plus\"></i>\n                        </Button>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\nItem.propTypes = {\n    list: PropTypes.object.isRequired,\n    tab: PropTypes.object.isRequired,\n    selfItem: PropTypes.object.isRequired,\n    addToList: PropTypes.func.isRequired,\n    updateNewList: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    tab: state.tab\n});\n\nexport default connect(mapStateToProps, { addToList, updateNewList })(Item);","import {GET_ITEMS, DELETE_ITEM, ADD_ITEM, ITEMS_LOADING} from \"./types\";\nimport axios from 'axios';\n\nexport const getItems = () => (dispatch) => {\n    dispatch(setItemsLoading());\n    return axios\n        .get('/api/items')\n        .then(res => dispatch({\n            type: GET_ITEMS,\n            payload: res.data\n        }))\n};\n\nexport const deleteItem = (id) => (dispatch) => {\n    return axios\n        .delete(`/api/items/${id}`)\n        .then(res =>\n            dispatch({\n                type: DELETE_ITEM,\n                payload: id\n            }))\n};\n\nexport const addItem = item => (dispatch) => {\n    return axios\n        .post('/api/items', item)\n        .then(res =>\n            dispatch({\n                type: ADD_ITEM,\n                payload: res.data\n            }))\n};\n\nexport const setItemsLoading = () => {\n    return {\n        type: ITEMS_LOADING\n    }\n};","import { addItem } from '../actions/itemActions';\nimport React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass ItemForm extends Component {\n\n    state = {\n        name: '',\n        description: '',\n        price: '',\n        avatar: ''\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let formData = new FormData();\n        formData.append('name', this.state.name);\n        formData.append('description', this.state.description);\n        formData.append('price', this.state.price * 100);\n        formData.append('avatar', this.state.avatar);\n        this.props.addItem(formData);\n        this.setState({\n            name: '',\n            description: '',\n            price: '',\n            avatar: ''\n        });\n    };\n\n    getPhoto = (e) => {\n        e.preventDefault();\n        this.setState({\n                avatar: e.target.files[0]\n        });\n    };\n\n    render() {\n        return (\n            <Form className={'order-form'} onSubmit={this.handleSubmit.bind(this)}>\n                <FormGroup>\n                    <Label for=\"exampleText\">Name</Label>\n                    <Input value={this.state.name} onChange={this.handleChange.bind(this)} type=\"text\" name=\"name\" id=\"exampleText\" placeholder=\"Enter Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Description</Label>\n                    <Input value={this.state.description} onChange={this.handleChange.bind(this)} type=\"tel\" name=\"description\" id=\"exampleText\" placeholder=\"Add description\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Price</Label>\n                    <Input value={this.state.price} onChange={this.handleChange.bind(this)} type=\"number\" name=\"price\" id=\"exampleText\" placeholder=\"Price\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Add Image</Label>\n                    <br/>\n                    <input\n                        onChange={this.getPhoto.bind(this)}\n                        type=\"file\"\n                        id=\"avatar\" name=\"avatar\"\n                        accept=\"image/png, image/jpeg\"/>\n                </FormGroup>\n                <Button>Submit</Button>\n            </Form>\n        );\n    }\n}\n\nItemForm.propTypes = {\n    addItem: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, { addItem })(ItemForm);","export const CLOSED_ORDER = 1;\nexport const OPEN_ORDER = 0;\n\nexport const OPEN_ORDER_TAB = 'openOrders';\nexport const NEW_ORDER_TAB = 'newOrder';\nexport const ITEMS_TAB = 'items';\nexport const NEW_ITEM_TAB = 'newItem';","import { CHANGE_ACTIVE_TAB } from \"./types\";\n\nexport const changeActiveTab = (fromTab, ToTab) => {\n    return {\n        type: CHANGE_ACTIVE_TAB,\n        payload: {\n            fromTab,\n            ToTab\n        }\n    };\n};","import React, { Component } from 'react';\nimport {Container, Row, Col, Nav, NavItem, NavLink, TabContent, TabPane} from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport Item from \"./Item\";\nimport { connect } from \"react-redux\";\nimport { deleteItem, getItems } from \"../actions/itemActions\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport ItemForm from \"./ItemForm\";\nimport { NEW_ITEM_TAB, ITEMS_TAB } from '../utils/consts';\nimport { changeActiveTab } from \"../actions/tabActions\";\n\nclass ItemGrid extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            activeTab: ITEMS_TAB\n        };\n    }\n    componentDidMount() {\n        this.props.getItems();\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.props.changeActiveTab(this.state.activeTab, tab);\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n    render() {\n        const { items } = this.props.item;\n        if (items) return (\n                <Col style={{paddingLeft: '0', paddingRight: '0'}} className={'custom-grid'}>\n                    <Nav tabs>\n                        <NavItem>\n                            <NavLink\n                                className={classnames({ active: this.state.activeTab === ITEMS_TAB }, 'nav-link')}\n                                onClick={() => { this.toggle(ITEMS_TAB); }}\n                            >\n                                <h3><strong>Items</strong></h3>\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink\n                                className={classnames({ active: this.state.activeTab === NEW_ITEM_TAB }, 'nav-link')}\n                                onClick={() => { this.toggle(NEW_ITEM_TAB); }}\n                            >\n                                <h3><strong>Item Management</strong></h3>\n                            </NavLink>\n                        </NavItem>\n                    </Nav>\n                    <TabContent activeTab={this.state.activeTab}>\n                        <TabPane tabId={ITEMS_TAB}>\n                            <Row>\n                                <Col sm=\"12\">\n                                    <Container>\n                                        <Row className={'item-grid-wrapper'}>\n                                            {items.map((item) => (\n                                                <Col  className={'limited-padding'} key={item._id} sm=\"12\" md=\"6\" lg=\"3\">\n                                                    <TransitionGroup className={\"shopping-list\"}>\n                                                        <CSSTransition  key={item._id}\n                                                                        timeout={500}\n                                                                        classNames={'fade'}>\n                                                            <Item selfItem={item}/>\n                                                        </CSSTransition>\n                                                    </TransitionGroup>\n                                                </Col>\n                                            ))}\n                                        </Row>\n                                    </Container>\n                                </Col>\n                            </Row>\n                        </TabPane>\n                        <TabPane tabId={NEW_ITEM_TAB}>\n                            <Row>\n                                <Col sm=\"12\">\n                                    <ItemForm/>\n                                </Col>\n                            </Row>\n                        </TabPane>\n                    </TabContent>\n                </Col>\n            );\n        else return (\n            <div>{\"No items to show\"}</div>\n        );\n    }\n}\n\nItemGrid.propTypes = {\n    item: PropTypes.object.isRequired,\n    changeActiveTab: PropTypes.func.isRequired,\n    getItems: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n});\n\nexport default connect(mapStateToProps, {getItems, deleteItem, changeActiveTab})(ItemGrid);","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nexport class AppNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        return (\n            <Navbar\n                dark expand={'sm'}\n                className={'mb-5 nav-bar custom-nav'}>\n                    <NavbarBrand href={'/'}>\n                        <img alt={'Logo'} src=\"/img/logo2.png\" width=\"100\"/><h1>Simple POS</h1></NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className={'ml-auto'} navbar>\n                            <NavItem>\n                                {\n                                this.props.auth.loggedIn? (<NavLink href={'/logout'}>\n                                    Logout\n                                </NavLink>) : ('')\n                                }\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n            </Navbar>\n        )\n    }\n}\n\nAppNavBar.propTypes = {\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { })(AppNavBar);","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n    /* pass a configuration object here if needed */\n})","import axios from 'axios';\n\nexport const setAuthHeader = token => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = token;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\n","import axios from 'axios';\nimport { LOGGED_IN, LOGGED_OUT } from \"./types\";\nimport history from '../history'\nimport { setAuthHeader } from \"../utils/setHeaders\";\n\nexport const authenticate = (user) => dispatch => {\n    return axios\n        .post('/api/users/authenticate', user)\n        .then(res => {\n            setAuthHeader(res.data.token);\n            dispatch(authenticateWithToken(res.data.token));\n        }).catch();\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setAuthHeader();\n    return {\n        type: LOGGED_OUT\n    };\n};\n\nexport const authenticateWithToken = (token) => dispatch => {\n    setAuthHeader(token);\n    return axios\n        .get('/api/users/current')\n        .then(res2 => {\n                if(res2.status === 200) {\n                    localStorage.setItem('token', token);\n                    localStorage.setItem('user', JSON.stringify(res2.data));\n                    history.push('/dashboard');\n                    const loggedIn = res2.status === 200;\n                    dispatch({\n                        type: LOGGED_IN,\n                        payload: {token: token, user: res2.data, loggedIn: loggedIn}\n                    })\n                }\n            }\n        ).catch();\n};\n\n","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from \"prop-types\";\n\nclass ConfirmationModal extends React.Component {\n\n    toggleModal = () => {\n        this.props.toggle();\n    };\n\n    handleConfirmation = () => {\n        this.props.onConfirm();\n        this.toggleModal();\n    };\n\n    render() {\n        return (\n            <div>\n                <Modal isOpen={this.props.isOpen} toggle={this.toggleModal.bind(this)}>\n                    <ModalHeader toggle={this.toggleModal.bind(this)}>{this.props.modalHeader}</ModalHeader>\n                    <ModalBody>\n                        {this.props.modalBodyText}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color={this.props.cancelColor}  onClick={this.toggleModal.bind(this)}>{this.props.modalCancelLabel}</Button>\n                        <Button color={this.props.confirmColor}  onClick={this.handleConfirmation.bind(this)}>{this.props.modalConfirmationLabel}</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nConfirmationModal.propTypes = {\n    modalHeader: PropTypes.string.isRequired,\n    modalCancelLabel: PropTypes.string.isRequired,\n    modalConfirmationLabel: PropTypes.string.isRequired,\n    cancelColor: PropTypes.string.isRequired,\n    confirmColor: PropTypes.string.isRequired,\n    modalBodyText: PropTypes.string.isRequired,\n    onConfirm: PropTypes.func.isRequired\n};\n\nexport default ConfirmationModal;","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { addToList, removeFromList } from \"../actions/listActions\";\n\nclass OpenOrderModal extends React.Component {\n\n    toggleModal = () => {\n        this.props.toggle();\n    };\n\n    addItemToList = (listId, itemId) => {\n        this.props.addToList(listId, itemId);\n    };\n\n    removeItemFromList = (listId, itemId) => {\n        this.props.removeFromList(listId, itemId);\n    };\n\n    render() {\n        let total = 0;\n        return (\n            <div>\n                <Modal centered={true} fade={false} isOpen={this.props.isOpen} toggle={this.toggleModal.bind(this)}>\n                    <ModalHeader toggle={this.toggleModal.bind(this)}>{this.props.modalHeader}</ModalHeader>\n                    <ModalBody>\n                        <table style={{width: '100%'}}>\n                            <tbody>\n                                <tr>\n                                    <th>Item</th>\n                                    <th className={'text-right'}>Count</th>\n                                    <th className={'text-right'}>Price</th>\n                                    <th className={'text-right'}>Add/Remove</th>\n                                </tr>\n                                {this.props.items.map(item => {\n                                    total = total + item.price * item.count / 100\n                                    return (\n                                        <tr key={item._id}>\n                                            <td>\n                                                {item.name.charAt(0).toUpperCase() + item.name.slice(1)}\n                                            </td>\n                                            <td className={'text-right'}>\n                                                {item.count}\n                                            </td>\n                                            <td className={'text-right'}>\n                                                {(item.price * item.count / 100).toFixed()}\n                                            </td>\n                                            <td className={'text-right'}>\n                                            <button type=\"button\" value=\"plus\" onClick={this.addItemToList.bind(this, this.props.id, item.id)}>\n                                                <i className=\"fa fa-plus\"></i>\n                                            </button>\n                                                <button type=\"button\" value=\"minus\" onClick={this.removeItemFromList.bind(this, this.props.id, item.id)}>\n                                                    <i className=\"fa fa-minus\"></i>\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    )\n                                })}\n                                <tr>\n                                    <td colspan=\"4\" className={'text-right'}>\n                                        <b>{'Total :'}{total.toString()}</b>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color={this.props.cancelColor}  onClick={this.toggleModal.bind(this)}>{this.props.modalCancelLabel}</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\n\nOpenOrderModal.propTypes = {\n    addToList: PropTypes.func.isRequired,\n    removeFromList: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, { addToList,removeFromList })(OpenOrderModal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { Col } from 'reactstrap';\nimport { getItems } from '../actions/itemActions'\nimport { closeList, removeList } from '../actions/listActions';\nimport classnames from \"classnames\";\nimport ConfirmationModal from './ConfirmationModal';\nimport OpenOrderModal from './OpenOrderModal';\n\nclass OrderList extends Component {\n    state = {\n        confirmationModal: false,\n        orderListModal: false,\n        checkoutConformationModal: false\n    };\n\n    toggle = () => {\n        this.setState(prevState => ({\n            confirmationModal: !prevState.confirmationModal\n        }));\n    };\n\n    toggleCheckout = () => {\n        this.setState(prevState => ({\n            checkoutConformationModal: !prevState.checkoutConformationModal\n        }));\n    };\n\n    toggleOrderModal = () => {\n        this.setState(prevState => ({\n            orderListModal: !prevState.orderListModal\n        }));\n    }\n\n    onDeleteClick = () => {\n        console.log('deleting');\n        this.props.removeList(this.props.id);\n\n    };\n\n    onCheckoutClick = () => {\n        const { lists } = this.props.list;\n        const list = lists.filter(list => list._id === this.props.id)[0];\n        this.props.closeList({\n            ...list,\n            status: 1\n        });\n    };\n\n    setActiveList = (id) => {\n        this.props.setActiveList(id);\n    };\n\n    openOrder = () => {\n        this.toggleOrderModal();\n    };\n\n    render() {\n        const { lists } = this.props.list;\n        const _id = this.props.id;\n        const name = this.props.name;\n        const list = lists.filter(list => list._id === _id)[0];\n        const items =list.items.map(listitem => {\n            const item = this.props.item.items.filter(item => item._id === listitem.id)[0];\n            if (item)\n                return {...listitem, price: item.price, name: item.name};\n            return false\n        }).filter(listitem => listitem !== false);\n        let sum = 0;\n        if (items.length > 0) {\n            sum = items.map(item => item.price * item.count / 100).reduce((total, value) => total + value, 0).toFixed(2);\n        }\n        return (\n            <Col className={'limited-padding'} sm=\"4\">\n                <div\n                    onClick={this.setActiveList.bind(this, _id)}\n                    className={classnames({ active_list: this.props.activeList === _id }, 'card')}>\n                    <div className={'card-body-wrapper'}>\n                        <OpenOrderModal\n                            id={_id}\n                            isOpen={this.state.orderListModal}\n                            toggle={this.toggleOrderModal.bind(this)}\n                            modalBodyText={'Opened Order'}\n                            modalHeader={name}\n                            modalConfirmationLabel={'Delete'}\n                            modalCancelLabel={'Close'}\n                            cancelColor={\"secondary\"}\n                            confirmColor={\"danger\"}\n                            items={items}\n                        />\n                        <div className={'.card-header:first-child'} style={{color: '#ffffff', backgroundColor : '#8b918b', padding: '5px'}}><h5>{name}</h5></div>\n                        <table className={'m-1 border'}>\n                            <tbody>\n                            <tr>\n                                <th style={{width: '50%'}} className={'text-left'}>Item</th>\n                                <th style={{width: '10%'}} className={'text-right'}>Qty</th>\n                                <th style={{width: '40%'}} className={'text-right'}>Price</th>\n                            </tr>\n                        {items.map(item => (\n                            <tr key={item._id}>\n                                <td style={{width: '50%'}} className={'text-left'}>{\n                                    item.name.charAt(0).toUpperCase() + item.name.slice(1)\n                                }</td>\n                                <td style={{width: '10%'}} className={'text-right'}>{item.count}</td>\n                                <td style={{width: '40%'}} className={'text-right'}>{(item.price * item.count / 100).toFixed(2)}</td>\n                            </tr>\n                        ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <p className=\"price\" style={{color: '#000000'}}> {sum} LKR</p>\n                    <button className={'suc ml-1 mr-1 mt-1 view-btn'} onClick={this.openOrder.bind(this)}>\n                                    <span className={'icon-span'}>\n                                        View\n                                    </span>\n                    </button>\n                    <div className={'card-button-wrapper m-1'}>\n                        <span className={'card-button'}>\n                            <div>\n                                <button className={'suc'} onClick={this.toggleCheckout.bind(this)}>\n                                    <span role=\"img\" className={'icon-span'} aria-label=\"Check\">\n                                        <i className=\"fa fa-check\"></i>\n                                    </span>\n                                </button>\n                                <ConfirmationModal\n                                    onConfirm={this.onCheckoutClick.bind(this)}\n                                    isOpen={this.state.checkoutConformationModal}\n                                    toggle={this.toggleCheckout.bind(this)}\n                                    modalBodyText={'Are you sure you want to check out this order?'}\n                                    modalHeader={'Confirmation'}\n                                    modalConfirmationLabel={'Checkout'}\n                                    modalCancelLabel={'Cancel'}\n                                    cancelColor={\"secondary\"}\n                                    confirmColor={\"success\"}\n                                />\n                            </div>\n                        </span>\n                        <span className={'card-button'}>\n                            <div>\n                                <button className={'dan'} onClick={this.toggle.bind(this)}>\n                                    <span className={'icon-span'}>\n                                        <i className=\"fa fa-times\"></i>\n                                    </span>\n                                </button>\n                                <ConfirmationModal\n                                    onConfirm={this.onDeleteClick.bind(this)}\n                                    isOpen={this.state.confirmationModal}\n                                    toggle={this.toggle.bind(this)}\n                                    modalBodyText={'You are about to delete an Order List. Are you sure you want to delete?'}\n                                    modalHeader={'Confirmation'}\n                                    modalConfirmationLabel={'Delete'}\n                                    modalCancelLabel={'Cancel'}\n                                    cancelColor={\"secondary\"}\n                                    confirmColor={\"danger\"}\n                                />\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </Col>\n        );\n    }\n}\n\nOrderList.propTypes = {\n    getItems: PropTypes.func.isRequired,\n    removeList: PropTypes.func.isRequired,\n    closeList: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired,\n    list: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    list: state.list\n});\n\nexport default connect(mapStateToProps, { getItems, removeList, closeList })(OrderList);\n\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {  getLists, selectList } from \"../actions/listActions\";\nimport OrderList from './OrderList';\nimport { Row, Col } from \"reactstrap\";\n\nclass ListContainer extends Component {\n    state = {\n        activeList: ''\n    };\n    componentDidMount() {\n        this.props.getLists(this.props.auth.user.id);\n    }\n\n    setActiveList = (id) => {\n        this.setState({\n            activeList: id\n        });\n        this.props.selectList(id);\n    };\n\n    render() {\n        const { lists } = this.props.list;\n        let renderLists = [];\n        if (lists)\n            renderLists = lists.filter(list => list.status !== 1 && list.items.length > 0);\n        if (renderLists.length > 0) return (\n            <Col>\n                <Row className={'order-grid'}>\n                    {renderLists.map(({_id, name}) => (\n                        <OrderList activeList={this.state.activeList} key={_id} name={name} id={_id} setActiveList={this.setActiveList}/>\n                    ))}\n                </Row>\n            </Col>\n        );\n        else return (\n            <div>{'No open orders'}</div>\n        );\n    }\n}\n\nListContainer.propTypes = {\n    getLists: PropTypes.func.isRequired,\n    selectList: PropTypes.func.isRequired,\n    list: PropTypes.object.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, { getLists, selectList })(ListContainer);","import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { updateNewList, createList, clearList } from '../actions/listActions';\n\nclass OrderForm extends Component {\n    handleChange = (e) => {\n        this.props.updateNewList({\n                ...this.props.list.newList,\n                [e.target.name] : e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.createList(this.props.list.newList);\n    };\n\n    handleClear = (e) => {\n        e.preventDefault();\n        this.props.clearList(this.props.list.newList);\n    };\n\n    render() {\n        let number = 0;\n        let total = 0;\n        return (\n            <Form className={'order-form'}>\n                <FormGroup>\n                    <Label for=\"exampleText\">Customer Name</Label>\n                    <Input value={this.props.list.newList.name} onChange={this.handleChange.bind(this)} type=\"text\" name=\"name\" id=\"exampleText\" placeholder=\"Enter Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleSelect\">Add Items</Label>\n                    <div className=\"custom-table\">\n                        <table className=\"table\">\n                            <thead className=\"thead-light\">\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">Item</th>\n                                <th scope=\"col\">Count</th>\n                                <th scope=\"col\">Price</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.props.list.newList.items.map(list_item => {\n                                const item = this.props.item.items.filter(item => item._id === list_item.id)[0];\n                                return {...item, count: list_item.count}\n                            }).map(item => {\n                                total += item.price * item.count / 100;\n                                return (\n                                    <tr key={item._id}>\n                                        <th scope=\"row\">{++number}</th>\n                                        <td>{item.name}</td>\n                                        <td>{item.count}</td>\n                                        <td>{item.price * item.count / 100}</td>\n                                    </tr>\n                                )\n                            })}\n                            <tr>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\">{total? \"Total\": \"\"}</th>\n                                <th scope=\"col\">{total? total: ''}</th>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </FormGroup>\n                <Row>\n                    <Col/><Col/><Col/>\n                    <Col>\n                        <Button style={{border: '0', width: '100%'}} className={'dan'} onClick={this.handleClear.bind(this)}>Clear</Button>\n                    </Col>\n                    <Col>\n                        <Button style={{border: '0', width: '100%'}} className={'suc'} onClick={this.handleSubmit.bind(this)}>Submit</Button>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nOrderForm.propTypes = {\n    list: PropTypes.object.isRequired,\n    item: PropTypes.object.isRequired,\n    updateNewList: PropTypes.func.isRequired,\n    createList: PropTypes.func.isRequired,\n    clearList: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    item: state.item\n});\n\nexport default connect(mapStateToProps, { updateNewList, createList, clearList })(OrderForm);","import React, { Component } from 'react';\nimport OrderForm from './OrderForm';\n\nexport default class NewOrder extends Component {\n    render() {\n        return (\n            <OrderForm/>\n        );\n    }\n}","import React from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col } from 'reactstrap';\nimport classnames from 'classnames';\nimport ListContainer from './ListContainer';\nimport NewOrder from './NewOrder';\nimport { OPEN_ORDER_TAB, NEW_ORDER_TAB } from '../utils/consts'\nimport { changeActiveTab } from \"../actions/tabActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nclass LeftGrid extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            activeTab: OPEN_ORDER_TAB\n        };\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.props.changeActiveTab(this.state.activeTab, tab);\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n    render() {\n        return (\n            <Col style={{paddingLeft: '0', paddingRight: '0'}}  className={\"custom-grid\"}>\n                <Nav tabs>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === OPEN_ORDER_TAB }, 'nav-link')}\n                            onClick={() => { this.toggle(OPEN_ORDER_TAB); }}\n                        >\n                            <h3><strong>Open Orders</strong></h3>\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === NEW_ORDER_TAB }, 'nav-link')}\n                            onClick={() => { this.toggle(NEW_ORDER_TAB); }}\n                        >\n                            <h3><strong>New Order</strong></h3>\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId={OPEN_ORDER_TAB}>\n                        <Row>\n                            <Col sm=\"12\">\n                                <ListContainer/>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                    <TabPane tabId={NEW_ORDER_TAB}>\n                        <Row>\n                            <Col sm=\"12\">\n                                <NewOrder/>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                </TabContent>\n            </Col>\n        );\n    }\n}\n\nLeftGrid.propTypes = {\n    changeActiveTab: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    list: state.list\n});\n\nexport default connect(mapStateToProps, { changeActiveTab })(LeftGrid);","import React, { Component } from 'react';\n\nimport { Row} from 'reactstrap';\nimport { Redirect } from \"react-router\";\nimport ItemGrid from './ItemGrid';\nimport AppNavBar from './AppNavBar';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { authenticateWithToken } from \"../actions/authActions\";\nimport { getItems } from \"../actions/itemActions\";\nimport LeftGrid from \"./LeftGrid\";\n\nclass Body extends Component {\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.props.authenticateWithToken(token);\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n    render() {\n        if (this.props.auth.loggedIn) {\n            return (\n                <div>\n                    <AppNavBar/>\n                    <Row style={{marginRight: '0', marginLeft: '0'}}>\n                        <LeftGrid/>\n                        <ItemGrid/>\n                    </Row>\n                </div>\n            )\n        } else {\n            return (<Redirect to=\"/login\"/>);\n        }\n    }\n}\n\nBody.propTypes = {\n    authenticateWithToken: PropTypes.func.isRequired,\n    getItems: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { authenticateWithToken, getItems })(Body);\n","import React, { Component } from 'react';\nimport {\n    Container, Col, Form,\n    FormGroup, Label, Input,\n    Button,\n} from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { authenticate, authenticateWithToken } from \"../actions/authActions\";\nimport AppNavBar from './AppNavBar';\nimport { Redirect } from 'react-router';\nimport history from '../history';\n\nclass Login extends Component {\n    state = {\n        username: '',\n        password: '',\n    };\n\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.props.authenticateWithToken(token);\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.authenticate(this.state);\n        history.push('/dashboard');\n    };\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    };\n\n    render() {\n        if (this.props.auth.loggedIn) {\n            return (\n                <Redirect to={'/dashboard'}/>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <AppNavBar/>\n                    <Container className=\"App col-6\">\n                        <h2>Sign In</h2>\n                        <Form className=\"form\">\n                            <Col>\n                                <FormGroup>\n                                    <Label>Username</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"username\"\n                                        placeholder=\"Username\"\n                                        onChange={this.handleChange.bind(this)}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col>\n                                <FormGroup>\n                                    <Label for=\"examplePassword\">Password</Label>\n                                    <Input\n                                        type=\"password\"\n                                        name=\"password\"\n                                        id=\"examplePassword\"\n                                        placeholder=\"********\"\n                                        onChange={this.handleChange.bind(this)}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Button\n                                onClick={this.handleSubmit.bind(this)}\n                            >Submit</Button>\n                        </Form>\n                    </Container>\n                </div>\n            );\n        }\n    }\n}\n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired,\n    authenticateWithToken: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { authenticate, authenticateWithToken})(Login);","import React, { Component } from 'react';\nimport { Redirect } from \"react-router\";\nimport Proptypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { logout } from '../actions/authActions';\n\nclass Logout extends Component {\n\n    componentWillMount() {\n        this.props.logout();\n    }\n\n    render() {\n        return (\n            <Redirect to={'/'}/>\n        );\n    }\n}\n\nLogout.propTypes = {\n    auth: Proptypes.object.isRequired,\n    logout: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => (\n    {\n        auth: state.auth\n    });\n\nexport default connect(mapStateToProps, { logout })(Logout);","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport Body from './components/Body';\nimport Login from './components/Login';\nimport { Router, Route } from 'react-router-dom'\nimport history from './history'\nimport Logout from './components/Logout';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Router history={history}>\n                <div>\n                    <Route exact path=\"/\" component={Body} />\n                    <Route path=\"/login\" component={Login} />\n                    <Route path=\"/dashboard\" component={Body} />\n                    <Route path=\"/logout\" component={Logout} />\n                </div>\n            </Router>\n        );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_ITEM, DELETE_ITEM, GET_ITEMS, ITEMS_LOADING} from \"../actions/types\";\n\n\nconst initialState = {\n    items: [],\n    loading: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item => item._id !== action.payload)\n            };\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [...state.items, action.payload]\n            };\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        default:\n            return state;\n    }\n}","import { LOGGED_IN, LOGGED_OUT, AUTH_LOADING } from \"../actions/types\";\n\nconst initialState = {\n    loggedIn: false,\n    user: {},\n    loading: false,\n    token: ''\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case LOGGED_IN:\n            return {\n                ...state,\n                token: action.payload.token,\n                user: action.payload.user,\n                loggedIn: action.payload.loggedIn,\n            };\n        case LOGGED_OUT:\n            return {\n                ...state,\n                token: '',\n                user: {},\n                loggedIn: false,\n                loading: false,\n            };\n        case AUTH_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n\n        default:\n            return state;\n    }\n}","import {\n    ADD_LIST,\n    DELETE_LIST,\n    LISTS_LOADING,\n    GET_LISTS,\n    SELECT_LIST,\n    UPDATE_LIST,\n    UPDATE_NEW_LIST,\n    CLEAR_NEW_LIST\n} from \"../actions/types\";\nimport {OPEN_ORDER} from \"../utils/consts\";\n\n\nconst initialState = {\n    lists: [],\n    loading: false,\n    selectedList: null,\n    newList: {\n        name: '',\n        status: OPEN_ORDER,\n        items: []\n    }\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE_NEW_LIST:\n            return {\n                ...state,\n                newList: action.payload\n            };\n        case GET_LISTS:\n            return {\n                ...state,\n                lists: action.payload,\n                loading: false\n            };\n        case DELETE_LIST:\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.payload),\n            };\n        case ADD_LIST:\n            return {\n                ...state,\n                lists: [...state.lists, action.payload]\n            };\n        case LISTS_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        case SELECT_LIST:\n            return {\n                ...state,\n                selectedList: action.payload\n            };\n        case UPDATE_LIST:\n            return {\n                ...state,\n                lists: state.lists.map(list => {\n                    return list._id === action.payload.id? {...list, items: action.payload.items}: list;\n                })\n            };\n        case CLEAR_NEW_LIST:\n            return {\n                ...state,\n                newList: {\n                    name: '',\n                    status: OPEN_ORDER,\n                    items: []\n                }\n            };\n        default:\n            return state;\n    }\n}","import { CHANGE_ACTIVE_TAB } from \"../actions/types\";\n\nconst initialState = {\n    openOrders: true,\n    newOrder: false,\n    items: true,\n    newItem: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case CHANGE_ACTIVE_TAB:\n            return {\n                ...state,\n                [action.payload.fromTab] : false,\n                [action.payload.ToTab] : true\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport itemReducer from './itemReducer';\nimport authReducer from './authReducer';\nimport listReducer from './listReducer';\nimport tabReducer from \"./tabReducer\";\n\nexport default combineReducers({\n    item: itemReducer,\n    auth: authReducer,\n    list: listReducer,\n    tab: tabReducer\n});","import {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {\n\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport './styles/index.css';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}