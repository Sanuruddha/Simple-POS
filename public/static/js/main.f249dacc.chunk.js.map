{"version":3,"sources":["actions/itemActions.js","actions/types.js","components/ItemForm.js","utils/consts.js","actions/tabActions.js","actions/listActions.js","components/Item.js","components/ItemGridTab.js","components/RightGrid.js","components/AppNavBar.js","history.js","utils/setHeaders.js","actions/authActions.js","components/ConfirmationModal.js","components/OpenOrderModal.js","components/OrderList.js","components/ListContainer.js","components/OrderForm.js","components/NewOrder.js","components/LeftGrid.js","components/Body.js","components/Login.js","components/Logout.js","App.js","serviceWorker.js","reducers/itemReducer.js","reducers/authReducer.js","reducers/listReducer.js","reducers/tabReducer.js","reducers/index.js","store.js","index.js"],"names":["getItems","dispatch","setItemsLoading","axios","get","then","res","type","payload","data","ItemForm","state","name","description","price","avatar","handleChange","e","_this","setState","Object","defineProperty","target","value","showToast","error","toast","autoClose","hideProgressBar","handleSubmit","preventDefault","formData","FormData","length","append","props","addItem","getPhoto","files","react_default","a","createElement","Form","className","onSubmit","this","bind","FormGroup","Label","for","Input","onChange","id","placeholder","accept","Button","style","minHeight","width","Component","connect","item","post","OPEN_ORDER_TAB","ITEMS_TAB","changeActiveTab","fromTab","ToTab","setListsLoading","addToList","listId","itemId","put","concat","items","updateNewList","list","Item","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","open","toggle","tab","openOrders","selectedList","selfItem","_id","newOrder","updatedItems","newList","map","indexOf","count","toConsumableArray","objectSpread","onChangeInput","assertThisInitialized","Card","CardHeader","color","backgroundColor","padding","CardTitle","toUpperCase","CardImg","top","src","imgPath","alt","CardBody","CardText","toFixed","onClick","ItemGridTab","_this$props$item","loading","Col","Spinner","height","Container","Row","key","sm","md","lg","react_transition_group","timeout","classNames","components_Item","RightGrid","activeTab","_this2","paddingLeft","paddingRight","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","components_ItemGridTab","components_ItemForm","deleteItem","delete","AppNavBar","_Component","isOpen","inherits","createClass","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","auth","loggedIn","createBrowserHistory","setAuthHeader","token","defaults","headers","common","authenticateWithToken","status","localStorage","setItem","JSON","stringify","history","push","user","catch","ConfirmationModal","toggleModal","handleConfirmation","onConfirm","Modal","ModalHeader","modalHeader","ModalBody","modalBodyText","ModalFooter","cancelColor","modalCancelLabel","confirmColor","modalConfirmationLabel","React","OpenOrderModal","addItemToList","removeItemFromList","removeFromList","total","centered","fade","charAt","slice","marginRight","colspan","toString","OrderList","confirmationModal","orderListModal","checkoutConformationModal","prevState","toggleCheckout","toggleOrderModal","onDeleteClick","console","log","removeList","onCheckoutClick","lists","filter","closeList","setActiveList","openOrder","shift","listitem","sum","reduce","active_list","activeList","components_OpenOrderModal","role","aria-label","components_ConfirmationModal","ListContainer","selectList","getLists","_this$props$list","renderLists","_ref","components_OrderList","OrderForm","createList","handleClear","clearList","handleIncrement","handleDecrement","index","splice","number","scope","list_item","rowSpan","colSpan","border","NewOrder","components_OrderForm","LeftGrid","components_ListContainer","NewOrder_NewOrder","Body","getItem","components_AppNavBar","lib","newestOnTop","pauseOnFocusLoss","marginLeft","components_LeftGrid","components_RightGrid","Redirect","to","Login","username","password","authenticate","maxWidth","minWidth","textAlign","paddingTop","Logout","logout","removeItem","App","Router","Route","exact","path","component","Boolean","window","location","hostname","match","initialState","newItem","combineReducers","arguments","undefined","action","_objectSpread2","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f249dacc.chunk.js","sourcesContent":["import {GET_ITEMS, DELETE_ITEM, ADD_ITEM, ITEMS_LOADING} from \"./types\";\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nexport const getItems = () => (dispatch) => {\n    dispatch(setItemsLoading());\n    return axios\n        .get('/api/items')\n        .then(res => dispatch({\n            type: GET_ITEMS,\n            payload: res.data\n        }))\n};\n\nexport const deleteItem = (id) => (dispatch) => {\n    return axios\n        .delete(`/api/items/${id}`)\n        .then(res => {\n            dispatch({\n                type: DELETE_ITEM,\n                payload: id\n            });\n            toast('Item deleted successfully',  { type: 'success', autoClose: 2000, hideProgressBar: true});\n        });\n};\n\nexport const addItem = item => (dispatch) => {\n    return axios\n        .post('/api/items', item)\n        .then(res => {\n                dispatch({\n                    type: ADD_ITEM,\n                    payload: res.data\n                });\n            toast('Item added successfully',  { type: 'success', autoClose: 2000, hideProgressBar: true});\n        });\n};\n\nexport const setItemsLoading = () => {\n    return {\n        type: ITEMS_LOADING\n    }\n};","//item\nexport const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\n\n//auth\nexport const LOGGED_IN = 'LOGGED_IN';\nexport const LOGGED_OUT ='LOGGED_OUT';\nexport const AUTH_LOADING = 'AUTH_LOADING';\n\n\n//list\nexport const GET_LISTS = 'GET_LISTS';\nexport const GET_LISTS_BY_USER = 'GET_LISTS_BY_USER';\nexport const ADD_LIST = 'ADD_LIST';\nexport const DELETE_LIST = 'DELETE_LIST';\nexport const CLOSE_LIST = 'CLOSE_LIST';\nexport const LISTS_LOADING = 'LISTS_LOADING';\nexport const SELECT_LIST = 'SELECT_LIST';\nexport const UPDATE_LIST = 'UPDATE_LIST';\nexport const UPDATE_NEW_LIST = 'UPDATE_NEW_LIST';\nexport const CLEAR_NEW_LIST = 'CLEAR_NEW_LIST';\n\n//tab\nexport const CHANGE_ACTIVE_TAB = 'CHANGE_ACTIVE_TAB';\n","import { addItem } from '../actions/itemActions';\nimport React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { toast } from 'react-toastify';\n\nclass ItemForm extends Component {\n\n    state = {\n        name: '',\n        description: '',\n        price: 0,\n        avatar: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n    showToast = (error, type) => toast(error,  { type, autoClose: 2000, hideProgressBar: true});\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // FormData object is needed because of the image file upload.\n        let formData = new FormData();\n\n        // Bunch of validation checks before sending the post request to create an item\n        if (!this.state.name.length > 0) return this.showToast('Invalid item name', 'error');\n        formData.append('name', this.state.name);\n        if (!this.state.description.length > 0) return this.showToast('Invalid item description', 'error');\n        formData.append('description', this.state.description);\n        if (this.state.price === 0) return this.showToast('Invalid item price', 'error');\n        formData.append('price', this.state.price * 100);\n        if (!this.state.avatar) return this.showToast('Invalid item image', 'error');\n        formData.append('avatar', this.state.avatar);\n\n        this.props.addItem(formData);\n        this.setState({\n            name: '',\n            description: '',\n            price: 0,\n            avatar: ''\n        });\n    };\n\n    getPhoto = (e) => {\n        e.preventDefault();\n        this.setState({\n                avatar: e.target.files[0]\n        });\n    };\n\n    render() {\n        return (\n            <Form className={'order-form'} onSubmit={this.handleSubmit.bind(this)}>\n                <FormGroup>\n                    <Label for=\"exampleText\">Name</Label>\n                    <Input value={this.state.name} onChange={this.handleChange.bind(this)} type=\"text\" name=\"name\" id=\"exampleText\" placeholder=\"Enter Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Description</Label>\n                    <Input value={this.state.description} onChange={this.handleChange.bind(this)} type=\"tel\" name=\"description\" id=\"exampleText\" placeholder=\"Add description\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Price</Label>\n                    <Input value={this.state.price} onChange={this.handleChange.bind(this)} type=\"number\" name=\"price\" id=\"exampleText\" placeholder=\"Price\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Add Image (400 x 266)</Label>\n                    <br/>\n                    <input\n                        onChange={this.getPhoto.bind(this)}\n                        type=\"file\"\n                        id=\"avatar\" name=\"avatar\"\n                        accept=\"image/png, image/jpeg\"/>\n                </FormGroup>\n                <Button style={{minHeight: '3rem', width: '100%'}}>Add Item</Button>\n            </Form>\n        );\n    }\n}\n\nItemForm.propTypes = {\n    addItem: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, { addItem })(ItemForm);","export const CLOSED_ORDER = 1;\nexport const OPEN_ORDER = 0;\n\nexport const OPEN_ORDER_TAB = 'openOrders';\nexport const NEW_ORDER_TAB = 'newOrder';\nexport const ITEMS_TAB = 'items';\nexport const NEW_ITEM_TAB = 'newItem';","import { CHANGE_ACTIVE_TAB } from \"./types\";\n\nexport const changeActiveTab = (fromTab, ToTab) => {\n    return {\n        type: CHANGE_ACTIVE_TAB,\n        payload: {\n            fromTab,\n            ToTab\n        }\n    };\n};","import {\n    LISTS_LOADING,\n    DELETE_LIST,\n    GET_LISTS,\n    SELECT_LIST,\n    ADD_LIST,\n    UPDATE_LIST,\n    UPDATE_NEW_LIST,\n    CLEAR_NEW_LIST\n} from \"./types\";\nimport axios from 'axios';\nimport {toast} from \"react-toastify\";\n\nexport const clearList = () => {\n    return {\n        type:CLEAR_NEW_LIST,\n    }\n};\n\nexport const createList = (list) => (dispatch) => {\n    dispatch({\n        type: CLEAR_NEW_LIST\n    });\n    return axios\n        .post(`/api/lists`, list)\n        .then(res => {\n            dispatch({\n                type: ADD_LIST,\n                payload: res.data\n            });\n            toast('Order added successfully',  { type: 'success', autoClose: 2000, hideProgressBar: true});\n        });\n};\n\nexport const getLists = (id) => (dispatch) => {\n    dispatch(setListsLoading());\n    return axios\n        .get(`/api/lists/user/${id}`)\n        .then(res => dispatch({\n            type: GET_LISTS,\n            payload: res.data\n        }))\n};\n\nexport const removeList = (id) => (dispatch) => {\n    return axios\n        .delete(`/api/lists/${id}`)\n        .then(res => {\n            dispatch({\n                type: DELETE_LIST,\n                payload: res.data._id\n            });\n            toast('Order deleted successfully',  { type: 'success', autoClose: 2000, hideProgressBar: true});\n        });\n\n};\n\nexport const closeList = list => (dispatch) => {\n    return axios\n        .put('/api/lists', list)\n        .then(res =>{\n                dispatch({\n                    type: DELETE_LIST,\n                    payload: res.data._id\n                });\n                dispatch({\n                    type: ADD_LIST,\n                    payload: res.data\n                });\n            toast('Order checked out successfully',  { type: 'success', autoClose: 2000, hideProgressBar: true});\n        }).catch(\n\n    );\n};\n\nexport const selectList = (id) => {\n    return {\n        type: SELECT_LIST,\n        payload: id\n    }\n};\n\nexport const setListsLoading = () => {\n    return {\n        type: LISTS_LOADING\n    }\n};\n\nexport const addToList = (listId, itemId) => (dispatch) => {\n    return axios\n        .put(`/api/lists/${listId}/${itemId}`)\n        .then(res => {\n            dispatch({\n                type: UPDATE_LIST,\n                payload: {\n                    items: res.data,\n                    id: listId\n                }\n            })\n        });\n};\n\nexport const removeFromList = (listId, itemId) => (dispatch) => {\n    return axios\n        .delete(`/api/lists/${listId}/${itemId}`)\n        .then(res => {\n            dispatch({\n                type: UPDATE_LIST,\n                payload: {\n                    items: res.data,\n                    id: listId\n                }\n            })\n        });\n};\n\nexport const updateNewList = list => {\n    return {\n        type: UPDATE_NEW_LIST,\n        payload: list\n    };\n};","import React, { Component } from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardImg,\n    CardTitle,\n} from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport CardHeader from \"reactstrap/es/CardHeader\";\nimport { addToList, updateNewList } from \"../actions/listActions\";\nimport CardText from \"reactstrap/es/CardText\";\n\nclass Item extends Component {\n    constructor(props) {\n        super(props);\n        this.onChangeInput = this.onChangeInput.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n    state = {\n        open: false,\n        name: '',\n        description: ''\n    };\n\n    toggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n    onChangeInput(e) {\n        this.setState({\n            [e.target.name] : e.target.value\n        });\n    }\n    addToList = () => {\n        // checks which tab is open in the order list grid before adding the item\n        if (this.props.tab.openOrders)\n            // if open orders tab, then try to add the item to the selected list if any\n            this.props.addToList(this.props.list.selectedList, this.props.selfItem._id);\n        if (this.props.tab.newOrder) {\n            // if new order tab, then add the item to the new list temporary\n            let index = this.props.list.newList.items.map(item => item.id ).indexOf(this.props.selfItem._id);\n            let updatedItems = [];\n            // if the item added more than once, just increment count\n            if (index > -1)\n                updatedItems = this.props.list.newList.items.map(item => {\n                    if (item.id === this.props.selfItem._id) {\n                        item.count++;\n                    }\n                    return item;\n                });\n            // if the item is being added to the first time, insert item object\n            else {\n                updatedItems = [...this.props.list.newList.items, { id: this.props.selfItem._id, count : 1 }];\n            }\n            // call the action creator with the updated temporary item list\n            this.props.updateNewList({\n                ...this.props.list.newList,\n                items: updatedItems\n            });\n        }\n    };\n\n    render() {\n        const item = this.props.selfItem;\n        return (\n            <div>\n                <Card>\n                    <CardHeader style={{color: '#ffffff', backgroundColor : '#8b918b', padding: '5px'}}>\n                        <CardTitle>\n                            <h6>{item.name.toUpperCase()}</h6>\n                        </CardTitle>\n                    </CardHeader>\n                    <CardImg top className={'p-1 crop'}\n                        src={`/img/${item.imgPath}`}\n                             alt=\"Card image cap\" />\n                    <CardBody className={'p-1'}>\n                        <CardText className={'p-1 mb-1'}>{(item.price / 100).toFixed(2) + ' LKR'}</CardText>\n                        <Button className={'add-btn'} color={'success'}\n                                onClick={this.addToList.bind(this)}\n                        >\n                            <i className=\"fa fa-plus\"></i>\n                        </Button>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\nItem.propTypes = {\n    list: PropTypes.object.isRequired,\n    tab: PropTypes.object.isRequired,\n    selfItem: PropTypes.object.isRequired,\n    addToList: PropTypes.func.isRequired,\n    updateNewList: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    tab: state.tab\n});\n\nexport default connect(mapStateToProps, { addToList, updateNewList })(Item);","import React, { Component } from 'react';\nimport {Col, Container, Row, Spinner} from \"reactstrap\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport Item from \"./Item\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nclass ItemGridTab extends Component {\n    render() {\n        const { items, loading } = this.props.item;\n        // checks whether items are still loading\n        if (!loading) {\n            // checks whether there are any items after loading\n            if (items.length > 0) {\n                return (\n                    <Container>\n                        <Row className={'item-grid-wrapper'}>\n                            {items.map((item) => (\n                                <Col  className={'limited-padding'} key={item._id} sm=\"12\" md=\"6\" lg=\"3\">\n                                    <TransitionGroup className={\"shopping-list\"}>\n                                        <CSSTransition  key={item._id}\n                                                        timeout={500}\n                                                        classNames={'fade'}>\n                                            <Item selfItem={item}/>\n                                        </CSSTransition>\n                                    </TransitionGroup>\n                                </Col>\n                            ))}\n                        </Row>\n                    </Container>\n                )\n            } else {\n                return (\n                    <Col>\n                        <h4>No items to display</h4>\n                    </Col>\n                )\n            }\n\n        } else {\n            // render a spinner until the items are finished loading\n            return (\n                <Col>\n                    <Spinner style={{ width: '3rem', height: '3rem' }} />\n                </Col>\n            )\n        }\n\n    }\n}\n\nItemGridTab.propTypes = {\n    item: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\n\nexport default connect(mapStateToProps, {})(ItemGridTab);","import React, { Component } from 'react';\nimport { Row, Col, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\nimport { connect } from \"react-redux\";\nimport { deleteItem, getItems } from \"../actions/itemActions\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport ItemForm from \"./ItemForm\";\nimport { NEW_ITEM_TAB, ITEMS_TAB } from '../utils/consts';\nimport { changeActiveTab } from \"../actions/tabActions\";\nimport ItemGridTab from './ItemGridTab';\n\nclass RightGrid extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            activeTab: ITEMS_TAB\n        };\n    }\n    componentDidMount() {\n        this.props.getItems();\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.props.changeActiveTab(this.state.activeTab, tab);\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n    render() {\n        return (\n                <Col style={{paddingLeft: '0', paddingRight: '0'}} className={'custom-grid'}>\n                    <Nav tabs>\n                        <NavItem>\n                            <NavLink\n                                className={classnames({ active: this.state.activeTab === ITEMS_TAB }, 'nav-link')}\n                                onClick={() => { this.toggle(ITEMS_TAB); }}\n                            >\n                                <h3><strong>Items</strong></h3>\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink\n                                className={classnames({ active: this.state.activeTab === NEW_ITEM_TAB }, 'nav-link')}\n                                onClick={() => { this.toggle(NEW_ITEM_TAB); }}\n                            >\n                                <h3><strong>Item Management</strong></h3>\n                            </NavLink>\n                        </NavItem>\n                    </Nav>\n                    <TabContent activeTab={this.state.activeTab}>\n                        <TabPane tabId={ITEMS_TAB}>\n                            <Row>\n                                <Col sm=\"12\">\n                                    <ItemGridTab/>\n                                </Col>\n                            </Row>\n                        </TabPane>\n                        <TabPane tabId={NEW_ITEM_TAB}>\n                            <Row>\n                                <Col sm=\"12\">\n                                    <ItemForm/>\n                                </Col>\n                            </Row>\n                        </TabPane>\n                    </TabContent>\n                </Col>\n            );\n    }\n}\n\nRightGrid.propTypes = {\n    changeActiveTab: PropTypes.func.isRequired,\n    getItems: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, {getItems, deleteItem, changeActiveTab})(RightGrid);","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nexport class AppNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        return (\n            <Navbar\n                dark expand={'sm'}\n                className={'mb-5 nav-bar custom-nav'}>\n                    <NavbarBrand href={'/'}>\n                        <img alt={'Logo'} src=\"/img/logo2.png\" width=\"100\"/><h1>Simple POS</h1></NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className={'ml-auto'} navbar>\n                            {/*renders logout button if already logged in*/}\n                            <NavItem>\n                                {\n                                this.props.auth.loggedIn? (<NavLink href={'/logout'}>\n                                    Logout\n                                </NavLink>) : ('')\n                                }\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n            </Navbar>\n        )\n    }\n}\n\nAppNavBar.propTypes = {\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { })(AppNavBar);","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n    /* pass a configuration object here if needed */\n})","import axios from 'axios';\n\nexport const setAuthHeader = token => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = token;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\n","import axios from 'axios';\nimport { LOGGED_IN, LOGGED_OUT } from \"./types\";\nimport history from '../history'\nimport { setAuthHeader } from \"../utils/setHeaders\";\n\nexport const authenticate = (user) => dispatch => {\n    return axios\n        .post('/api/users/authenticate', user)\n        .then(res => {\n            setAuthHeader(res.data.token);\n            dispatch(authenticateWithToken(res.data.token));\n        }).catch();\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setAuthHeader();\n    return {\n        type: LOGGED_OUT\n    };\n};\n\nexport const authenticateWithToken = (token) => dispatch => {\n    setAuthHeader(token);\n    return axios\n        .get('/api/users/current')\n        .then(res => {\n                if(res.status === 200) {\n                    localStorage.setItem('token', token);\n                    localStorage.setItem('user', JSON.stringify(res.data));\n                    history.push('/dashboard');\n                    const loggedIn = res.status === 200;\n                    dispatch({\n                        type: LOGGED_IN,\n                        payload: {token: token, user: res.data, loggedIn: loggedIn}\n                    })\n                }\n            }\n        ).catch();\n};\n\n","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from \"prop-types\";\n\nclass ConfirmationModal extends React.Component {\n\n    toggleModal = () => {\n        this.props.toggle();\n    };\n\n    handleConfirmation = () => {\n        this.props.onConfirm();\n        this.toggleModal();\n    };\n\n    render() {\n        return (\n            <div>\n                <Modal isOpen={this.props.isOpen} toggle={this.toggleModal.bind(this)}>\n                    <ModalHeader toggle={this.toggleModal.bind(this)}>{this.props.modalHeader}</ModalHeader>\n                    <ModalBody>\n                        {this.props.modalBodyText}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button style={{minHeight: '3rem',width: '50%'}} color={this.props.cancelColor}  onClick={this.toggleModal.bind(this)}>{this.props.modalCancelLabel}</Button>\n                        <Button style={{minHeight: '3rem',width: '50%'}} color={this.props.confirmColor}  onClick={this.handleConfirmation.bind(this)}>{this.props.modalConfirmationLabel}</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nConfirmationModal.propTypes = {\n    modalHeader: PropTypes.string.isRequired,\n    modalCancelLabel: PropTypes.string.isRequired,\n    modalConfirmationLabel: PropTypes.string.isRequired,\n    cancelColor: PropTypes.string.isRequired,\n    confirmColor: PropTypes.string.isRequired,\n    modalBodyText: PropTypes.string.isRequired,\n    onConfirm: PropTypes.func.isRequired\n};\n\nexport default ConfirmationModal;","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { addToList, removeFromList } from \"../actions/listActions\";\n\nclass OpenOrderModal extends React.Component {\n\n    toggleModal = () => {\n        this.props.toggle();\n    };\n\n    addItemToList = (listId, itemId) => {\n        this.props.addToList(listId, itemId);\n    };\n\n    removeItemFromList = (listId, itemId) => {\n        this.props.removeFromList(listId, itemId);\n    };\n\n    render() {\n        let total = 0;\n        return (\n            <div>\n                <Modal centered={true} fade={false} isOpen={this.props.isOpen} toggle={this.toggleModal.bind(this)}>\n                    <ModalHeader toggle={this.toggleModal.bind(this)}>{this.props.modalHeader}</ModalHeader>\n                    <ModalBody>\n                        <table style={{width: '100%'}}>\n                            <tbody>\n                                <tr>\n                                    <th style={{paddingLeft: '0.2rem'}}>Item</th>\n                                    <th className={'text-right'}>Count</th>\n                                    <th className={'text-right'}>Price</th>\n                                    <th className={'text-right'}>Add/Remove</th>\n                                </tr>\n                                {this.props.items.map(item => {\n                                    total = total + item.price * item.count / 100\n                                    return (\n                                        <tr key={item._id}>\n                                            <td style={{paddingLeft: '0.5rem'}}>\n                                                {item.name.charAt(0).toUpperCase() + item.name.slice(1)}\n                                            </td>\n                                            <td className={'text-right'}>\n                                                {item.count}\n                                            </td>\n                                            <td className={'text-right'}>\n                                                {(item.price * item.count / 100).toFixed()}\n                                            </td>\n                                            <td className={'text-right'}>\n                                            <button style={{width: '40%', marginRight: '0.2rem'}} className='plus-button btn btn-success suc' type=\"button\" value=\"plus\" onClick={this.addItemToList.bind(this, this.props.id, item.id)}>\n                                                <i className=\"fa fa-plus\"></i>\n                                            </button>\n                                            <button style={{width: '40%'}} className='minus-button btn btn-danger dan' type=\"button\" value=\"minus\" onClick={this.removeItemFromList.bind(this, this.props.id, item.id)}>\n                                                <i className=\"fa fa-minus\"></i>\n                                            </button>\n                                            </td>\n                                        </tr>\n                                    )\n                                })}\n                                <tr>\n                                    <td colspan=\"4\" className={'text-right'}>\n                                        <b>{'Total :'}{total.toString()}</b>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button style={{width: '100%'}} color={this.props.cancelColor}  onClick={this.toggleModal.bind(this)}>{this.props.modalCancelLabel}</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\n\nOpenOrderModal.propTypes = {\n    addToList: PropTypes.func.isRequired,\n    removeFromList: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nexport default connect(mapStateToProps, { addToList,removeFromList })(OpenOrderModal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { Col } from 'reactstrap';\nimport { getItems } from '../actions/itemActions'\nimport { closeList, removeList } from '../actions/listActions';\nimport classnames from \"classnames\";\nimport ConfirmationModal from './ConfirmationModal';\nimport OpenOrderModal from './OpenOrderModal';\n\nclass OrderList extends Component {\n    state = {\n        confirmationModal: false,\n        orderListModal: false,\n        checkoutConformationModal: false\n    };\n\n    toggle = () => {\n        this.setState(prevState => ({\n            confirmationModal: !prevState.confirmationModal\n        }));\n    };\n\n    toggleCheckout = () => {\n        this.setState(prevState => ({\n            checkoutConformationModal: !prevState.checkoutConformationModal\n        }));\n    };\n\n    toggleOrderModal = () => {\n        this.setState(prevState => ({\n            orderListModal: !prevState.orderListModal\n        }));\n    }\n\n    onDeleteClick = () => {\n        console.log('deleting');\n        this.props.removeList(this.props.id);\n\n    };\n\n    onCheckoutClick = () => {\n        const { lists } = this.props.list;\n        const list = lists.filter(list => list._id === this.props.id)[0];\n        this.props.closeList({\n            ...list,\n            status: 1\n        });\n    };\n\n    setActiveList = (id) => {\n        this.props.setActiveList(id);\n    };\n\n    openOrder = () => {\n        this.toggleOrderModal();\n    };\n\n    render() {\n        const { lists } = this.props.list;\n        const _id = this.props.id;\n        const name = this.props.name;\n        // get the self order list\n        const list = lists.filter(list => list._id === _id).shift();\n        // items is an object id array\n        // populates the items array with relevant items from item state\n        const items =list.items.map(listitem => {\n            const item = this.props.item.items.filter(item => item._id === listitem.id).shift();\n            if (item)\n                return {...listitem, price: item.price, name: item.name};\n            return null\n        }).filter(listitem => listitem !== null);\n        let sum = 0;\n        if (items.length > 0) {\n            sum = items.map(item => item.price * item.count / 100).reduce((total, value) => total + value, 0).toFixed(2);\n        }\n        return (\n            <Col className={'limited-padding'} sm=\"4\">\n                <div\n                    onClick={this.setActiveList.bind(this, _id)}\n                    className={classnames({ active_list: this.props.activeList === _id }, 'card')}>\n                    <div className={'card-body-wrapper'}>\n                        <OpenOrderModal\n                            id={_id}\n                            isOpen={this.state.orderListModal}\n                            toggle={this.toggleOrderModal.bind(this)}\n                            modalBodyText={'Opened Order'}\n                            modalHeader={name}\n                            modalConfirmationLabel={'Delete'}\n                            modalCancelLabel={'Close'}\n                            cancelColor={\"secondary\"}\n                            confirmColor={\"danger\"}\n                            items={items}\n                        />\n                        <div className={'.card-header:first-child'} style={{color: '#ffffff', backgroundColor : '#8b918b', padding: '5px'}}><h5>{name}</h5></div>\n                        <table className={'m-1 border'}>\n                            <tbody>\n                            <tr>\n                                <th style={{width: '50%'}} className={'text-left'}>Item</th>\n                                <th style={{width: '10%'}} className={'text-right'}>Qty</th>\n                                <th style={{width: '40%'}} className={'text-right'}>Price</th>\n                            </tr>\n                        {items.map(item => (\n                            <tr key={item._id}>\n                                <td style={{width: '50%'}} className={'text-left'}>{\n                                    item.name.charAt(0).toUpperCase() + item.name.slice(1)\n                                }</td>\n                                <td style={{width: '10%'}} className={'text-right'}>{item.count}</td>\n                                <td style={{width: '40%'}} className={'text-right'}>{(item.price * item.count / 100).toFixed(2)}</td>\n                            </tr>\n                        ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <p className=\"price\" style={{color: '#000000'}}> {sum} LKR</p>\n                    <button className={'suc ml-1 mr-1 mt-1 view-btn'} onClick={this.openOrder.bind(this)}>\n                                    <span className={'icon-span'}>\n                                        View\n                                    </span>\n                    </button>\n                    <div className={'card-button-wrapper m-1'}>\n                        <span className={'card-button'}>\n                            <div>\n                                <button className={'suc'} onClick={this.toggleCheckout.bind(this)}>\n                                    <span role=\"img\" className={'icon-span'} aria-label=\"Check\">\n                                        <i className=\"fa fa-check\"></i>\n                                    </span>\n                                </button>\n                                <ConfirmationModal\n                                    onConfirm={this.onCheckoutClick.bind(this)}\n                                    isOpen={this.state.checkoutConformationModal}\n                                    toggle={this.toggleCheckout.bind(this)}\n                                    modalBodyText={'Are you sure you want to check out this order?'}\n                                    modalHeader={'Confirmation'}\n                                    modalConfirmationLabel={'Checkout'}\n                                    modalCancelLabel={'Cancel'}\n                                    cancelColor={\"secondary\"}\n                                    confirmColor={\"success\"}\n                                />\n                            </div>\n                        </span>\n                        <span className={'card-button'}>\n                            <div>\n                                <button className={'dan'} onClick={this.toggle.bind(this)}>\n                                    <span className={'icon-span'}>\n                                        <i className=\"fa fa-times\"></i>\n                                    </span>\n                                </button>\n                                <ConfirmationModal\n                                    onConfirm={this.onDeleteClick.bind(this)}\n                                    isOpen={this.state.confirmationModal}\n                                    toggle={this.toggle.bind(this)}\n                                    modalBodyText={'You are about to delete an Order List. Are you sure you want to delete?'}\n                                    modalHeader={'Confirmation'}\n                                    modalConfirmationLabel={'Delete'}\n                                    modalCancelLabel={'Cancel'}\n                                    cancelColor={\"secondary\"}\n                                    confirmColor={\"danger\"}\n                                />\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </Col>\n        );\n    }\n}\n\nOrderList.propTypes = {\n    getItems: PropTypes.func.isRequired,\n    removeList: PropTypes.func.isRequired,\n    closeList: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired,\n    list: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    list: state.list\n});\n\nexport default connect(mapStateToProps, { getItems, removeList, closeList })(OrderList);\n\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {  getLists, selectList } from \"../actions/listActions\";\nimport OrderList from './OrderList';\nimport { Row, Col, Spinner } from \"reactstrap\";\n\nclass ListContainer extends Component {\n    state = {\n        activeList: ''\n    };\n    componentDidMount() {\n        this.props.getLists(this.props.auth.user.id);\n    }\n\n    setActiveList = (id) => {\n        this.setState({\n            activeList: id\n        });\n        this.props.selectList(id);\n    };\n\n    render() {\n        const { lists, loading } = this.props.list;\n        // checks if the order lists are loading\n        if (!loading) {\n            let renderLists = [];\n            if (lists) {\n                // filters open and non empty orders\n                renderLists = lists.filter(list => list.status !== 1 && list.items.length > 0);\n            }\n            if (renderLists.length > 0) {\n                // renders open and non empty orders if exist\n                return (\n                    <Col>\n                        <Row className={'order-grid'}>\n                            {renderLists.map(({_id, name}) => (\n                                <OrderList activeList={this.state.activeList} key={_id} name={name} id={_id}\n                                           setActiveList={this.setActiveList}/>\n                            ))}\n                        </Row>\n                    </Col>)\n            } else {\n                return (\n                    <Col>\n                        <h4>No orders to display</h4>\n                    </Col>\n                )\n            }\n\n        } else return (\n            // renders a spinner while loading\n            <Col>\n                <Spinner style={{ width: '3rem', height: '3rem' }} />\n            </Col>\n        );\n    }\n}\n\nListContainer.propTypes = {\n    getLists: PropTypes.func.isRequired,\n    selectList: PropTypes.func.isRequired,\n    list: PropTypes.object.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, { getLists, selectList })(ListContainer);","import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { updateNewList, createList, clearList } from '../actions/listActions';\nimport {toast} from \"react-toastify\";\n\nclass OrderForm extends Component {\n    handleChange = (e) => {\n        this.props.updateNewList({\n                ...this.props.list.newList,\n                [e.target.name] : e.target.value\n        });\n    };\n    showToast = (error, type) => toast(error,  { type, autoClose: 2000, hideProgressBar: true});\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // handles bunch of validations before adding an order\n        if (!this.props.list.newList.name.length > 0) return this.showToast('Invalid order list name', 'error');\n        if (!this.props.list.newList.items.length > 0) return this.showToast('Number of items in the order list cannot be 0', 'error');\n        this.props.createList(this.props.list.newList);\n    };\n    handleClear = (e) => {\n        e.preventDefault();\n        this.props.clearList(this.props.list.newList);\n    };\n    handleIncrement = (id, e) => {\n        e.preventDefault();\n        let index = this.props.list.newList.items.map(item => item.id ).indexOf(id);\n        let updatedItems = [];\n        if (index > -1)\n            updatedItems = this.props.list.newList.items.map(item => {\n                if (item.id === id) {\n                    item.count++;\n                }\n                return item;\n            });\n        this.props.updateNewList({\n            ...this.props.list.newList,\n            items: updatedItems\n        });\n    };\n\n    handleDecrement = (id, e) => {\n        e.preventDefault();\n        let index = this.props.list.newList.items.map(item => item.id ).indexOf(id);\n        let updatedItems = [...this.props.list.newList.items];\n        if (index > -1)\n            // decrement the item count if the count is greater than 1\n            if (updatedItems[index].count > 1)\n                updatedItems[index].count --;\n            // remove the item from list if the count is 1\n            else if (updatedItems[index].count === 1)\n                updatedItems.splice(index, 1);\n        this.props.updateNewList({\n            ...this.props.list.newList,\n            items: updatedItems\n        });\n    };\n\n    render() {\n        let number = 0;\n        let total = 0;\n        return (\n            <Form className={'order-form'}>\n                <FormGroup>\n                    <Label for=\"exampleText\">Customer Name</Label>\n                    <Input value={this.props.list.newList.name} onChange={this.handleChange.bind(this)} type=\"text\" name=\"name\" id=\"exampleText\" placeholder=\"Enter Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleSelect\">Add Items</Label>\n                    <div className=\"custom-table\">\n                        <table className=\"table\">\n                            <thead className=\"thead-light\">\n                            <tr>\n                                <th scope=\"col\" className=\"td-left\">#</th>\n                                <th scope=\"col\" className=\"td-left\">Item</th>\n                                <th scope=\"col\" className=\"td-right\">Count</th>\n                                <th scope=\"col\" className=\"td-right\">Price</th>\n                                <th scope=\"col\" className=\"td-right\">+/-</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.props.list.newList.items.map(list_item => {\n                                const item = this.props.item.items.filter(item => item._id === list_item.id)[0];\n                                return {...item, count: list_item.count}\n                            }).map(item => {\n                                total += item.price * item.count / 100;\n                                return (\n                                    <tr key={item._id}>\n                                        <th scope=\"row\" className=\"td-left\">{++number}</th>\n                                        <td className=\"td-left\">{item.name}</td>\n                                        <td className=\"td-right\">{item.count}</td>\n                                        <td className=\"td-right\">{item.price * item.count / 100}</td>\n                                        <td className=\"td-right\">\n                                            <button style={{width: '40%', marginRight: '0.2rem'}} className='minus-button btn btn-success suc' onClick={this.handleIncrement.bind(this, item._id)}><i className=\"fa fa-plus\"></i></button>\n                                            <button style={{width: '40%'}} className='minus-button btn btn-danger dan' onClick={this.handleDecrement.bind(this, item._id)}><i className=\"fa fa-minus\"></i></button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            <tr>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\">{\"\"}</th>\n                                <th scope=\"col\" className=\"td-right\">{total? \"Total\": \"\"}</th>\n                                <th scope=\"col\" className=\"td-right\">{total? total: ''}</th>\n                            </tr>\n                            <tr>\n                                <th rowSpan={2} colSpan={5} scope=\"col\" style={{padding: '2rem 0 0 0'}} className=\"td-right\">\n                                    <Button style={{border: '0', minHeight: '3rem', width: '49%', marginRight: '0.2rem'}} className={'dan'} onClick={this.handleClear.bind(this)}>Clear</Button>\n                                    <Button style={{border: '0', minHeight: '3rem', width: '50%'}} className={'suc'} onClick={this.handleSubmit.bind(this)}>Add Order</Button>\n                                </th>\n\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </FormGroup>\n            </Form>\n        );\n    }\n}\n\nOrderForm.propTypes = {\n    list: PropTypes.object.isRequired,\n    item: PropTypes.object.isRequired,\n    updateNewList: PropTypes.func.isRequired,\n    createList: PropTypes.func.isRequired,\n    clearList: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    list: state.list,\n    item: state.item\n});\n\nexport default connect(mapStateToProps, { updateNewList, createList, clearList })(OrderForm);","import React, { Component } from 'react';\nimport OrderForm from './OrderForm';\n\nexport default class NewOrder extends Component {\n    render() {\n        return (\n            <OrderForm/>\n        );\n    }\n}","import React from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col } from 'reactstrap';\nimport classnames from 'classnames';\nimport ListContainer from './ListContainer';\nimport NewOrder from './NewOrder';\nimport { OPEN_ORDER_TAB, NEW_ORDER_TAB } from '../utils/consts'\nimport { changeActiveTab } from \"../actions/tabActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nclass LeftGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            activeTab: OPEN_ORDER_TAB\n        };\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.props.changeActiveTab(this.state.activeTab, tab);\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n    render() {\n        return (\n            <Col style={{paddingLeft: '0', paddingRight: '0'}}  className={\"custom-grid\"}>\n                <Nav tabs>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === OPEN_ORDER_TAB }, 'nav-link')}\n                            onClick={() => { this.toggle(OPEN_ORDER_TAB); }}\n                        >\n                            <h3><strong>Open Orders</strong></h3>\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === NEW_ORDER_TAB }, 'nav-link')}\n                            onClick={() => { this.toggle(NEW_ORDER_TAB); }}\n                        >\n                            <h3><strong>New Order</strong></h3>\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId={OPEN_ORDER_TAB}>\n                        <Row>\n                            <Col sm=\"12\">\n                                <ListContainer/>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                    <TabPane tabId={NEW_ORDER_TAB}>\n                        <Row>\n                            <Col sm=\"12\">\n                                <NewOrder/>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                </TabContent>\n            </Col>\n        );\n    }\n}\n\nLeftGrid.propTypes = {\n    changeActiveTab: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    item: state.item,\n    list: state.list\n});\n\nexport default connect(mapStateToProps, { changeActiveTab })(LeftGrid);","import React, { Component } from 'react';\nimport { Row} from 'reactstrap';\nimport { Redirect } from \"react-router\";\nimport RightGrid from './RightGrid';\nimport AppNavBar from './AppNavBar';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport { authenticateWithToken } from \"../actions/authActions\";\nimport { getItems } from \"../actions/itemActions\";\nimport LeftGrid from \"./LeftGrid\";\nimport {ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Body extends Component {\n    componentDidMount() {\n        // checks for an auth token in the local storage\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.props.authenticateWithToken(token);\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n    render() {\n        //renders body if logged in, else redirects to login page\n        if (this.props.auth.loggedIn) {\n            return (\n                <div>\n                    <AppNavBar/>\n                    <ToastContainer newestOnTop pauseOnFocusLoss={false}/>\n                    <Row style={{marginRight: '0', marginLeft: '0'}}>\n                        <LeftGrid/>\n                        <RightGrid/>\n                    </Row>\n                </div>\n            )\n        } else {\n            return (<Redirect to=\"/login\"/>);\n        }\n    }\n}\n\nBody.propTypes = {\n    authenticateWithToken: PropTypes.func.isRequired,\n    getItems: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { authenticateWithToken, getItems })(Body);\n","import React, { Component } from 'react';\nimport {\n    Container, Row, Form,\n    FormGroup, Label, Input,\n    Button,\n} from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { authenticate, authenticateWithToken } from \"../actions/authActions\";\nimport AppNavBar from './AppNavBar';\nimport { Redirect } from 'react-router';\nimport history from '../history';\nimport '../styles/index.css';\n\nclass Login extends Component {\n    state = {\n        username: '',\n        password: '',\n    };\n\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n        // checks for an auth token and if any, authenticate with token then set the logged in state\n        if (token) {\n            this.props.authenticateWithToken(token);\n        } else {\n            // redirects to login page if no auth token\n            this.props.history.push('/login');\n        }\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // try to authenticate with username password then set the logged in state and redirects to dashboard if successful\n        this.props.authenticate(this.state);\n        history.push('/dashboard');\n    };\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    };\n\n    render() {\n        if (this.props.auth.loggedIn) {\n            // redirects dashboard if user is logged in\n            return (\n                <Redirect to={'/dashboard'}/>\n            )\n        }\n        else {\n            // renders login form if not logged in\n            return (\n                <div>\n                    <AppNavBar/>\n                    <Container style={{maxWidth: '30rem', minWidth: '20rem'}} className=\"App col-6\">\n                        <h2 style={{textAlign: 'center', paddingTop: '6rem'}}>Sign In</h2>\n                        <Form className=\"form\">\n                            <Row className={'added-padding'}>\n                                <FormGroup style={{width: '100%'}}>\n                                    <Label>Username</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"username\"\n                                        placeholder=\"Username\"\n                                        onChange={this.handleChange.bind(this)}\n                                    />\n                                </FormGroup>\n                            </Row>\n                            <Row className={'added-padding'}>\n                                <FormGroup style={{width: '100%'}}>\n                                    <Label for=\"examplePassword\">Password</Label>\n                                    <Input\n                                        type=\"password\"\n                                        name=\"password\"\n                                        id=\"examplePassword\"\n                                        placeholder=\"********\"\n                                        onChange={this.handleChange.bind(this)}\n                                    />\n                                </FormGroup>\n                            </Row>\n                            <Row className={'added-padding'}>\n                            <Button\n                                style={{width: '100%'}}\n                                onClick={this.handleSubmit.bind(this)}\n                            >Login</Button>\n                            </Row>\n                        </Form>\n                    </Container>\n                </div>\n            );\n        }\n    }\n}\n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired,\n    authenticateWithToken: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { authenticate, authenticateWithToken})(Login);","import React, { Component } from 'react';\nimport { Redirect } from \"react-router\";\nimport Proptypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { logout } from '../actions/authActions';\n\nclass Logout extends Component {\n\n    componentWillMount() {\n        this.props.logout();\n    }\n\n    render() {\n        return (\n            <Redirect to={'/'}/>\n        );\n    }\n}\n\nLogout.propTypes = {\n    auth: Proptypes.object.isRequired,\n    logout: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => (\n    {\n        auth: state.auth\n    });\n\nexport default connect(mapStateToProps, { logout })(Logout);","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport Body from './components/Body';\nimport Login from './components/Login';\nimport { Router, Route } from 'react-router-dom'\nimport history from './history'\nimport Logout from './components/Logout';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Router history={history}>\n                <div>\n                    <Route exact path=\"/\" component={Body} />\n                    <Route path=\"/login\" component={Login} />\n                    <Route path=\"/dashboard\" component={Body} />\n                    <Route path=\"/logout\" component={Logout} />\n                </div>\n            </Router>\n        );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_ITEM, DELETE_ITEM, GET_ITEMS, ITEMS_LOADING} from \"../actions/types\";\n\n\nconst initialState = {\n    items: [],\n    loading: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item => item._id !== action.payload)\n            };\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [...state.items, action.payload]\n            };\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        default:\n            return state;\n    }\n}","import { LOGGED_IN, LOGGED_OUT, AUTH_LOADING } from \"../actions/types\";\n\nconst initialState = {\n    loggedIn: false,\n    user: {},\n    loading: false,\n    token: ''\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case LOGGED_IN:\n            return {\n                ...state,\n                token: action.payload.token,\n                user: action.payload.user,\n                loggedIn: action.payload.loggedIn,\n            };\n        case LOGGED_OUT:\n            return {\n                ...state,\n                token: '',\n                user: {},\n                loggedIn: false,\n                loading: false,\n            };\n        case AUTH_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n\n        default:\n            return state;\n    }\n}","import {\n    ADD_LIST,\n    DELETE_LIST,\n    LISTS_LOADING,\n    GET_LISTS,\n    SELECT_LIST,\n    UPDATE_LIST,\n    UPDATE_NEW_LIST,\n    CLEAR_NEW_LIST\n} from \"../actions/types\";\nimport {OPEN_ORDER} from \"../utils/consts\";\n\n\nconst initialState = {\n    lists: [],\n    loading: false,\n    selectedList: null,\n    newList: {\n        name: '',\n        status: OPEN_ORDER,\n        items: []\n    }\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE_NEW_LIST:\n            return {\n                ...state,\n                newList: action.payload\n            };\n        case GET_LISTS:\n            return {\n                ...state,\n                lists: action.payload,\n                loading: false\n            };\n        case DELETE_LIST:\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.payload),\n            };\n        case ADD_LIST:\n            return {\n                ...state,\n                lists: [...state.lists, action.payload]\n            };\n        case LISTS_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        case SELECT_LIST:\n            return {\n                ...state,\n                selectedList: action.payload\n            };\n        case UPDATE_LIST:\n            return {\n                ...state,\n                lists: state.lists.map(list => {\n                    return list._id === action.payload.id? {...list, items: action.payload.items}: list;\n                })\n            };\n        case CLEAR_NEW_LIST:\n            return {\n                ...state,\n                newList: {\n                    name: '',\n                    status: OPEN_ORDER,\n                    items: []\n                }\n            };\n        default:\n            return state;\n    }\n}","import { CHANGE_ACTIVE_TAB } from \"../actions/types\";\n\nconst initialState = {\n    openOrders: true,\n    newOrder: false,\n    items: true,\n    newItem: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case CHANGE_ACTIVE_TAB:\n            return {\n                ...state,\n                [action.payload.fromTab] : false,\n                [action.payload.ToTab] : true\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport itemReducer from './itemReducer';\nimport authReducer from './authReducer';\nimport listReducer from './listReducer';\nimport tabReducer from \"./tabReducer\";\n\nexport default combineReducers({\n    item: itemReducer,\n    auth: authReducer,\n    list: listReducer,\n    tab: tabReducer\n});","import {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {\n\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport './styles/index.css';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}